[
  {
    "path": "posts/2021-06-13-resources-for-getting-started-in-r/",
    "title": "Resources for Getting Started in R",
    "description": "An assortment of resources for learning R, for beginner to advanced users.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": {}
      }
    ],
    "date": "2021-06-13",
    "categories": [],
    "contents": "\nI am often asked for resources to help folks get started in R, especially for folks doing some form of self-study. I strongly recommend using R in the RStudio IDE, which makes everything easier.\nBeginning at the Beginning\nOne of my favorites for installing and getting started with R and RStudio, especially for medical data, is the Reproducible Medical Research with R e-book which can be found here. Chapter 2 covers installation of R and RStudio, and Chapter 3 gives a quick overview of some of the cool things you can do with R. Lots of other chapters are helpful, and more chapters are coming.\nAn Antipodean Starter\nAnother favorite for beginners is the RYouWithMe? website from R-Ladies Sydney. This website has a lot of good starter tutorials on data cleaning, visualization, and producing output documents with RMarkdown.\nStart Tidy (in a Box)\nI recommend learning the tidyverse first, as these packages are built to work together, and have a consistent logic. Adding some base R later is important as well.\nThis is the approach taken by Ted Laderas in Ready for R, which is a self-learning course online.\nThis is also the approach taken by Mine Cetinkaya-Rundel for the Data Science in a Box website, which has lots of great lessons and tutorials for learning to use R.\nThe Tutorials Tab\nThere are a number of interactive tutorials in RStudio. These can be found under the Tutorials tab at the top right - just click on one of these to get started.\nA video course\nGetting Started with R helps a lot of people get started, and is in a video format.\nThe Wide (and growing) World of E-Books\nStarting out\nThe R basics book can help get you started.\nJust past beginner\nTry Hands on Programming with R, aka HOPR\nAnother late-beginner level book, Modern Dive is a intro Statistics-course focused e-book featuring the tidyverse, which can be found here.\nA common reference for “How do I do X in R?” is the R Cookbook.\nR for Data Science\nMost people really dig in to data science with R4DS.\nThis is the main data science “textbook” that most people use when digging into R in a serious way. For late beginner to early intermediate users.\nThere is even an exercises Solution Manual available online.\nBrushing up on Stats\nIf you want to brush up on your statistics while learning R, there are several good resources\nLearning Statistics with R\nOpenIntro Statistics: Labs for R is a companion for the OpenIntro Statistics textbook\nMore Advanced\nRmarkdown has 2 helpful books - The Definitive Guide and the Rmarkdown Cookbook\nYou can see how to do a lot with R graphics with the R Graphics Cookbook. Other good graphics resources include Fundamentals of Data Visualization and Data Vizualization\nYou can learn how to make your own web applications in R in the Shiny framework with Mastering Shiny\nIf text mining is your area, consider Text Mining with R.\nEfficient R programming helps you develop good coding habits (good for intermediate users)\nIf you are using big data on a server, you may need to use R at the Command Line\nIf you want to build your own R packages, you need the R Packages book.\nReproducibility and Version Control - requires tools like Git and Github - get started with Happy Git and GitHub for the UseR\nAdvanced R really gets under the hood of R\nMany, many other field-specific books and resources are compiled and organized in the Big Book of R\n\n\n\n",
    "preview": {},
    "last_modified": "2021-06-13T20:35:00-04:00",
    "input_file": "resources-for-getting-started-in-r.utf8.md"
  },
  {
    "path": "posts/2021-01-13-extracting-highlighting-as-data-from-excel/",
    "title": "Extracting Highlighting as Data from Excel Spreadsheets with {tidyxl}",
    "description": "Sometimes well-meaning people encode variables in medical data as highlighting with colors. For example, a spreadsheet where the control patients are in the green rows, and the test patients are in the red rows. This should have been encoded as a study_arm variable with values control and test. How to fix this - the {tidyxl} package can get under the hood of an excel spreadsheet and extract this information.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": {}
      }
    ],
    "date": "2021-01-13",
    "categories": [],
    "contents": "\nThe Excel Spreadsheet\nSo you, have unfortunately, agreed to try to analyze data in which a well-meaning person has encoded a variable as highlighter colors.\nYellow rows = control arm Red rows = test arm \nIs there an alternative to manually typing in a new variable, study_arm, with values “control” and “test”?\nFortunately, the {tidyxl} package can help, by getting under the hood and into the structure of this excel (xlsx) spreadsheet.\nGetting started\nLet’s start with a simple titanic example, included in the {tidyxl} package. First load the tidyxl and readxl packages, and read in the excel file from the package.\n\n\n# read in file from package\ntitanic <- system.file(\"extdata/titanic.xlsx\", package = \"tidyxl\")\nreadxl::read_excel(titanic)\n\n\n# A tibble: 10 x 7\n   ...1  ...2   Age      Child ...5  Adult ...7 \n   <chr> <chr>  <chr>    <chr> <chr> <chr> <chr>\n 1 <NA>  <NA>   Survived No    Yes   No    Yes  \n 2 Class Sex    <NA>     <NA>  <NA>  <NA>  <NA> \n 3 1st   Male   <NA>     0     5     118   57   \n 4 <NA>  Female <NA>     0     1     4     140  \n 5 2nd   Male   <NA>     0     11    154   14   \n 6 <NA>  Female <NA>     0     13    13    80   \n 7 3rd   Male   <NA>     35    13    387   75   \n 8 <NA>  Female <NA>     17    14    89    76   \n 9 Crew  Male   <NA>     0     0     670   192  \n10 <NA>  Female <NA>     0     0     3     20   \n\nExtracting Cell Data\nWe would like to identify and extract the cells highlighted in yellow. In this case, these are the cells in row 10 (row 11 in Excel, counting the header row), for the variables Adult and …7. But this is not obvious from the tibble.\n\n\n\nSo we will have to dig deeper into the xlsx file with the help of {tidyxl}. Let’s use the xlsx_cells() function to get more information on each cell, and store this in the object, x.\n\n\nx <- xlsx_cells(titanic)\nx\n\n\n# A tibble: 60 x 21\n   sheet address   row   col is_blank data_type error logical numeric\n   <chr> <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>     <dbl>\n 1 Shee… C1          1     3 FALSE    character <NA>  NA           NA\n 2 Shee… D1          1     4 FALSE    character <NA>  NA           NA\n 3 Shee… E1          1     5 TRUE     blank     <NA>  NA           NA\n 4 Shee… F1          1     6 FALSE    character <NA>  NA           NA\n 5 Shee… G1          1     7 TRUE     blank     <NA>  NA           NA\n 6 Shee… C2          2     3 FALSE    character <NA>  NA           NA\n 7 Shee… D2          2     4 FALSE    character <NA>  NA           NA\n 8 Shee… E2          2     5 FALSE    character <NA>  NA           NA\n 9 Shee… F2          2     6 FALSE    character <NA>  NA           NA\n10 Shee… G2          2     7 FALSE    character <NA>  NA           NA\n# … with 50 more rows, and 12 more variables: date <dttm>,\n#   character <chr>, character_formatted <list>, formula <chr>,\n#   is_array <lgl>, formula_ref <chr>, formula_group <int>,\n#   comment <chr>, height <dbl>, width <dbl>, style_format <chr>,\n#   local_format_id <int>\n\nNow we have information on each cell (identified by address) in each sheet, with row and column information, details on data_type, formulas, comments, style_format, and the underlying data in separate columns by data type. This helps us find (and filter) for specific cells or rows.\nExtracting Formatting Data\nBut we also need to get at the formatting. This can be done with xls_formats() from {tidyxl}. Warning: the output will be very long and icky. Be prepared to scroll down a lot.\n\n\nformats <- xlsx_formats(titanic)\nformats\n\n\n\nThis gives you the formats object, which is of the list class. This is a highly nested data structure. You can explore formats by clicking on it in the Environment Tab, then a tab for formats will open up in the Source Pane. Click on the blue arrow to the left of formats in the Source Pane - then dig deeper into the nesting by clicking on the blue arrow in turn for\nlocal, then\nfill\npatternFill\nfgColor (foreground color)\nrgb (the only one with content)\nWe are looking for the fill (highlighting) for the two cells highlighted in yellow.\nThis can be found programmatically with\n\n\nformats$local$fill$patternFill$fgColor$rgb\n\n\n[1] NA         NA         NA         \"FFFFFF00\"\n\nwhich is honestly, quite hideous, but is just following the layers of nesting above that you clicked through in the Source Pane.\nBut a nested list is an efficient way to store information when there are a lot of empty cells. Most of the cells will not be highlighted, so the folks who wrote Excel used this approach. The output identifies one RGB highlighting color used as a fill in this spreadsheet, “FFFFFF00”, which is yellow.\nIsolating the Highlighted Cells\nThe hard part is knowing where to hunt for the formatting you want to find. Digging around in the nested structure in the Source pane can help (especially if you have suggestions from the {tidyxl} web page). Once we have this color information, we can filter our x object to just the yellow-highlighted cells, with\n\n\nx %>% \n  filter(local_format_id %in% \n      which(formats$local$fill$patternFill$fgColor$rgb == \"FFFFFF00\")) %>%\n  select(address, data_type) ->\nlocation\nlocation\n\n\n# A tibble: 2 x 2\n  address data_type\n  <chr>   <chr>    \n1 F11     numeric  \n2 G11     numeric  \n\nThis takes the x object, then filters it on the local_format_id variable for a local format in which the fill color is yellow (which in this case turns out to be local_format_id = 4). Then we select the address column to get the cells that have been highlighted in the spreadsheet (F11 and G11 in this case).\nFinding the Highlighted Values\nTo get the highlighted values out, as these cells both contain numeric data, we can do the following:\n\n\nx %>% \n  filter(address %in% location$address) %>% \n  select(address, numeric)\n\n\n# A tibble: 2 x 2\n  address numeric\n  <chr>     <dbl>\n1 F11           3\n2 G11          20\n\nSo the highlighted values are 3 and 20.\nA Pilot Trial\nImagine a pilot trial of blood pressure medication with the study arm encoded as a highlighting color by row. Here is a picture of the original spreadsheet.\n\n\n\nLet’s read in the excel file.\n\n\npilot_path <- here(\"_posts/2021-01-13-extracting-highlighting-as-data-from-excel/bp_pilot.xlsx\")\npilot <- read_xlsx(pilot_path)\npilot\n\n\n# A tibble: 11 x 7\n   pat_id  sbp1  sbp2   hr1   hr2  dbp1  dbp2\n    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1      1   147   129    72    73    94    82\n 2      2   161   163    75    77    88    87\n 3      3   154   133    68    66    96    84\n 4      4   150   152    84    88    89    88\n 5      5   179   159    82    80    92    81\n 6      6   166   164    71    69    92    93\n 7      7   168   137    65    53    95    82\n 8      8   154   155    77    75    94    95\n 9      9   146   122    83    81    92    78\n10     10   172   171    86    84    95    95\n11     11   147   148    74    74    88    89\n\nFrom this tibble, we can’t see which rows were coded as test (red) vs. control (green). Let’s follow the same approach - first we will extract cell data.\nExtracting Cell Data\n\n\npilot_cells <- xlsx_cells(pilot_path)\npilot_cells\n\n\n# A tibble: 84 x 21\n   sheet address   row   col is_blank data_type error logical numeric\n   <chr> <chr>   <int> <int> <lgl>    <chr>     <chr> <lgl>     <dbl>\n 1 Shee… A1          1     1 FALSE    character <NA>  NA           NA\n 2 Shee… B1          1     2 FALSE    character <NA>  NA           NA\n 3 Shee… C1          1     3 FALSE    character <NA>  NA           NA\n 4 Shee… D1          1     4 FALSE    character <NA>  NA           NA\n 5 Shee… E1          1     5 FALSE    character <NA>  NA           NA\n 6 Shee… F1          1     6 FALSE    character <NA>  NA           NA\n 7 Shee… G1          1     7 FALSE    character <NA>  NA           NA\n 8 Shee… A2          2     1 FALSE    numeric   <NA>  NA            1\n 9 Shee… B2          2     2 FALSE    numeric   <NA>  NA          147\n10 Shee… C2          2     3 FALSE    numeric   <NA>  NA          129\n# … with 74 more rows, and 12 more variables: date <dttm>,\n#   character <chr>, character_formatted <list>, formula <chr>,\n#   is_array <lgl>, formula_ref <chr>, formula_group <int>,\n#   comment <chr>, height <dbl>, width <dbl>, style_format <chr>,\n#   local_format_id <int>\n\nThere are four different local_format_id values (1 through 4). But which is green, and which is red highlighting?\nLet’s dig into the formats.\nExtracting Formatting Data\n\n\npilot_formats <- xlsx_formats(pilot_path)\npilot_formats\n\n\n\nNow open the pilot_formats object by clicking on it in the Environment Tab. In the source pane, explore the nested list by clicking on blue arrows for\nlocal\nfill\npatternFill\nfgColor\nrgb\nand you will see 3 options in rgb - NA, and 2 RGB colors.\nNow let’s pull these with\n\n\npilot_formats$local$fill$patternFill$fgColor$rgb\n\n\n[1] NA         \"FFED7D31\" \"FF92D050\"\n\nIgnore the first FF, and the rest of the 2 strings represent a code for an RGB color. Go to https://www.colorhexa.com and type in the codes (prefix these with a hashtag) for #ED7D31 and then #92D050.\nThese two RGB colors are orangish-red and green, respectively.\nSo if the color “FFED7D31” is present in the cell formatting, that row is a trial participant in the test arm, and if the color “FF92D050”, that row is a trial participant in the control arm.\nNow we can mutate to create a new variable, study_arm and fill it with “test” and “control”.\n\n\npilot_cells %>% \n  filter(local_format_id %in% \n  which(pilot_formats$local$fill$patternFill$fgColor$rgb == \"FFED7D31\")) %>%\n  select(address, row, data_type) %>% \n  filter(str_detect(address,\"A\")) %>% \n  mutate(tibblerow = row - 1) %>% \n  pull(tibblerow) ->\ntest_rows\ntest_rows\n\n\n[1] 1 3 5 7 9\n\nNow we can use the test_rows vector to mutate the correct rows to “test” for a new variable, study_arm\n\n\npilot %>% \n  rownames_to_column(var = \"rowname\") %>% \n  mutate(study_arm = \n    case_when(rowname %in% test_rows ~ \"test\", \n              TRUE ~ \"control\")) %>% \n  select(rowname, sbp1:sbp2, dbp1:dbp2, study_arm)\n\n\n# A tibble: 11 x 6\n   rowname  sbp1  sbp2  dbp1  dbp2 study_arm\n   <chr>   <dbl> <dbl> <dbl> <dbl> <chr>    \n 1 1         147   129    94    82 test     \n 2 2         161   163    88    87 control  \n 3 3         154   133    96    84 test     \n 4 4         150   152    89    88 control  \n 5 5         179   159    92    81 test     \n 6 6         166   164    92    93 control  \n 7 7         168   137    95    82 test     \n 8 8         154   155    94    95 control  \n 9 9         146   122    92    78 test     \n10 10        172   171    95    95 control  \n11 11        147   148    88    89 control  \n\nwhich does, in fact, match up with the original spreadsheet.\n\n\n\nSo if you are ever facing a spreadsheet where data is encoded as colors, hopefully this walk-through will help.\n–\nYou can get more information about {tidyxl} and where to find formatting like bold, etc. here. The official pkgdown website and reference manual for {tidyxl} can be found here. You can unpack lots of badly assembled spreadsheets with the {tidyxl} and {unpivotr} packages. This is well beyond the scope of this post, but there are lots of worked examples, an online cookbook, and even screencasts.\nThis blog was created with the {distill} package. Distill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": "posts/2021-01-13-extracting-highlighting-as-data-from-excel/titanic.png",
    "last_modified": "2021-01-13T17:25:38-05:00",
    "input_file": {},
    "preview_width": 733,
    "preview_height": 360
  },
  {
    "path": "posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/",
    "title": "Creating Mini learnr Apps and Hosting on a Server",
    "description": "This post will explain how to create your own learnr apps and push them to an RStudio Server Open Source server.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": {}
      }
    ],
    "date": "2020-12-27",
    "categories": [],
    "contents": "\nBuilding your Own learnr apps\nApps built with the {learnr} package allow students to practice coding in a controlled environment.\nYou can add hints, solutions, and allow them to run their own code.\nYou can assess their responses with the {gradethis} package.\nBut how do you\nBuild these?\nUpload and Serve them on an RStudio Server Open Source server?\nIncorporate them into a blog post or a bookdown book?\nBuilding a learnr app\nFirst, plan out what you want to teach. Break it into several steps and functions. Think about exceptions you want to point out. Remember to point out and warn about common errors. Sketch out each of your examples.\nFor each example, plan out which dataset you will use. I generally use datasets from the {medicaldata} package. You can install this package with\n\n\n\nYou also need to have the {learnr} package installed from CRAN, along with its dependencies (like Shiny) with:\n\n\n\nI generally build and store learnr apps in one project, titled learnR_apps. Open this project. Check in the Files tab that you are in the root directory for this project (Home/Documents/RCode/learnR_apps for me), rather than in an app folder.\nLeveraging existing Apps\nCreate a new folder in the root directory of learnR_apps named for your new app, e.g. learn_function#\nGo to an existing app folder, and copy the learnr.Rmd file to your new folder\nGo to your new folder, and rename the learnr.Rmd file to your new app name (be careful to avoid typos - this should match the folder name).\nOpen the Rmd and start editing\nStarting Anew\nThen open a new {learnr} app by doing File/New File/Rmarkdown/From Template/Interactive Tutorial.\nGive this a title like learn_function# (numbering if you will have more than one on that topic.)\nYour {learnr} file will open in the Source Pane.\nEditing the YAML\nEdit the title to something meaningful, like “FIltering Exercise”. The output and runtime should remain the same, and should look something like this:\ntitle: “FIltering Exercise”\noutput: learnr::tutorial\nruntime: shiny_prerendered\nSetting up the Setup Chunk\nAdd important libraries after library(learnr)\nI often include {tidyverse}, {janitor}, and {medicaldata}. Other packages will depend on your topic.\nYou can then load individual datasets in the setup chunk, with assignment arrows to new objects, as shown below\n\n\n\nYour First Exercise\nSet up your first Exercise (Exercise 1)\nas an H2 heading with two ##\nThen add a short description of what you want the student to do:\n“Write the R code required to filter the prostate dataset to rows with a prostate volume (p_vol) greater than or equal to 90:”\nThen add your first R code chunk. Give it a name, like function1, and set options to “exercise=TRUE, error=TRUE, lines = 5”.  Make sure to include error=TRUE if you have blanks in the code.\nThe top line of your code chunk should read{r function1, exercise=TRUE, error=TRUE, lines=5}\nThen add to the code block your solution code. Run it to make sure everything works. For this example, we will use: prostate %>%  filter(age >= 90)\nThen copy the entire code chunk, including options, and paste it a few lines below. Edit the name of this new code chunk to be function1-solution, as below:\n{r function1-solution, eval=FALSE, lines = 5}\nNow copy the code in the solution chunk to the exercise chunk.\nReplace a few key items (arguments, function names) in the exercise code chunk with a blank — (three dashes). This will produce an error, but this is OK, as you set error = TRUE in the exercise chunk options. This will require the students to fill in in the blank. Something like: prostate %>% filter(— >= —)\nStart with only a few blanks at first, and increase the amount of typing that students have to do with each exercise chunk, until they can write a whole code pipeline on their own.\nAdding a hint\nCopy the solution code chunk, and paste the chunk in between the exercise and the solution. Rename this code chunk as function1-hint. Make sure to include error=TRUE if you have blanks in the code.\n{r function1-hint, error=TRUE, lines = 5}  prostate %>%  filter(age >= —)\nEdit the code in this chunk to provide an intermediate hint between the exercise and the solution. Sometimes it is better to make the solution the only hint in simple exercises.\nRun your learnr app to test it\nClick on the Run document button in the top center of the Source pane. This should generate a working learnr app. Test it with working and with non-working code. Test that the hints work, and that these can be copied to the exercise pane, and the code run successfully with the Run code button.\nMore Exercises\nAdd a new level 2 ## header for Exercise 2 after the completion of exercise 1. Copy your exercise, hint, and solution chunks as one blob, and paste these below. Change the chunk names to function-2, and add appropriate captions, like “Exercise 2: Filtering on Strings”\nAfter each exercise, test it with Run Document. When done, save your {learnr} app, commit to git, and push to GitHub.\nPutting Apps on the Shiny Server\nFor this example, I will refer to an RStudio Server Open Source with Shiny Server Open Source installed.\nTo access this, I need to be on campus, or connect via VPN.\nOnce the VPN is established, I can log into the server at https://higginslab-rstudio.med.umich.edu/ with my level 2 password.\nI can then go to the Files tab in RStudio, and click on the ellipses button in the upper right corner - on the same level as the path. This will allow me to enter a new path. In my case, I enter:\n/srv/shiny-server/shiny-apps/\nWhen I am in the correct folder, I create a new folder for the new app - named something like “learn_filter2”.\nThen click on this folder to open it.\nThen click on the Upload button to upload the .Rmd file of the new learnr app. Use the Choose File button, browse to my local computer, through Rcode/learnR_apps, and find the local version of the app in the learnR_apps project. Open the folder for the local app, choose the .Rmd file, and click OK to upload.\nNow that the file is on the server, it will generate the appropriate HTML file.\nReturn to the home directory in RStudio Server by clicking on the ellipses button in the Files tab, and enter “~” (tilde) to return to the home directory.\nTesting the New App\nYou should now be able to go to\nhttps://higginslab-rshiny.med.umich.edu/shiny-apps/\nand find the new app, and test it.\nYou can link to this app with the link https://higginslab-rshiny.med.umich.edu/shiny-apps/name_of_new_learnr_app\nInserting the New App into a Bookdown book\nYou can insert learnr apps with iframes.\nIt should look like this:\n\n### Your Turn - learnr exercises\n\n<iframe style=“margin:0 auto; border: solid black;” id=“myIframe9” width=“763” height=“763” src=“https://higginslab-rshiny.med.umich.edu/shiny-apps/learn_filter1/\" scrolling=”yes\">\n<\/iframe>\n\n Leave scrolling = “yes” if you have multiple exercises.\nEach iframe should have a unique id.\nThe source (src) should be equal to the link to the new app.\nThe same iframe approach works for blog posts.\nMaking this App Live in a Bookdown book\nAfter inserting the learnr app, add an appropriate header text introduction above.\nThen save the Rmd for this chapter.\nThen render the book with bookdown::render_book('index.html')\nThis will take a couple of minutes.\nThen publish the book to your bookdown.org account. In my case, this isbookdown::publish_book(account = 'pdr_higgins')\nEnter y to agree to update the book.\nWithin a minute, the book will be updated online.\n\n\n\n",
    "preview": {},
    "last_modified": "2020-12-27T20:33:52-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-12-publishing-a-bookdown-book-on-bookdownorg/",
    "title": "Publishing a {bookdown} book on bookdown.org",
    "description": "A short overview of creating a {bookdown} book and publishing on bookdown.org",
    "author": [
      {
        "name": "Peter Higgins",
        "url": {}
      }
    ],
    "date": "2020-12-12",
    "categories": [],
    "contents": "\nBuilding and Publishing a {bookdown} book on bookdown.org\nThis post will explain the steps involved to edit and create Reproducible Medical Research in R, which is published on bookdown.org, where you can create an account to publish your own e-book and share it with the world. Go ahead, go to bookdown to set up your own account.\nOnce you have an account,\nSetting up\nInstall the {bookdown} package, with install.packages('bookdown').\nThen run library(bookdown) in the Console to load the package.\nThen, in the RStudio IDE, Choose File/New Project/Book Project using bookdown.\nThen go to the Files tab, open index.Rmd, and click the Knit button. The Preview Window will show you a minimal example of a bookdown book. You can now start editing and adding new chapters.\nBookdown YAML\nYou can edit your _bookdown.yml file, which controls the setup of your book. I chose to have ‘manual’ control of chapter order, by listing the ‘ready for prime time’ chapters in the _bookdown.yml file in order. Draft chapters will not be included in the published book until I list them in this file.\nMy _bookdown.yml file looks something like this (more chapters being added):\n\n\nbook_filename: \"rmrwr\"\ntitle: \"Reproducible Medical Research with R\"\nlanguage:\n  ui:\n    chapter_name: \"Chapter \"\ndelete_merged_file: true\nnew_session: yes\nrmd_files:\n- index.Rmd\n- io02-getting-started.Rmd\n- io03-tasting.Rmd\n- io65-error_messages.Rmd\n- io04-updating.Rmd\n- io07-major-updates.Rmd\n- io08-data-validation.Rmd\n- io09-timeseries.Rmd\n- io10-tableOne.Rmd\n- io30-ttest.Rmd\n- io70-r_cmd_line.Rmd\n- io98-title-holder.Rmd\n- io99-references.Rmd\n\n\n\nOutput YAML\nYou can edit your _output.yml file, which controls the output and look of your book. My _output.yml file looks like this:\n\nbookdown::gitbook:\n  css: style.css\n  config:\n    toc:\n      before: |\n        <li><a href=\"./\">RMRWR<\/a><\/li>\n      after: |\n        <li><a href=\"https://github.com/rstudio/bookdown\" target=\"blank\">Published with bookdown<\/a><\/li>\n    edit: https://github.com/rstudio/bookdown-demo/edit/master/%s\n    download: [\"pdf\", \"epub\"]\nbookdown::pdf_book:\n  includes:\n    in_header: preamble.tex\n  latex_engine: xelatex\n  citation_package: natbib\n  keep_tex: yes\nbookdown::epub_book: default\n\nNote that this file refers to a style.css file, which affects the appearance of your book, by using cascading style sheets (css) for formatting. Lots of this was borrowed from Desiree DeLeon and her tinystats book.\nStyles.css\nMy style.css file looks like this:\n\n@import url('https://fonts.googleapis.com/css?family=Abril+Fatface|Source+Sans+Pro:400,400i,700,700i|Lora:400,400i,700,700i&display=swap');\n\np.caption {\n  color: #777;\n  margin-top: 10px;\n}\np code {\n  white-space: inherit;\n}\npre {\n  word-break: normal;\n  word-wrap: normal;\n}\npre code {\n  white-space: inherit;\n}\n\n/*  Desiree custom css  */\n\n/* next 3 rules for setting large image at top of each page and pushing book content to appear beneath that */\n/*\n.hero-image-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 390px;\n  /*background-image: url(\"images/books.jpg\");\n  background-color: #2F65A7;\n}*/\n\n/*.hero-image {\n  width: 100%;\n  height: 390px;\n  object-fit: cover;\n}*/\n\n/*.page-inner {\n  padding-top: 440px !important;\n}*/\n\n/* Links */\n\n.book .book-body .page-wrapper .page-inner section.normal a {\n  color: #702082;\n}\n\n\n/* Body and header text */\n\n.book.font-family-1 {\n  font-family: 'Source Sans Pro', arial, sans-serif;\n}\n\nh1, h2, h3, h4 {\n  font-family: 'Lora', arial, sans-serif;\n}\n\n\n.book .book-body .page-wrapper .page-inner section.normal h1,\n.book .book-body .page-wrapper .page-inner section.normal h2,\n.book .book-body .page-wrapper .page-inner section.normal h3,\n.book .book-body .page-wrapper .page-inner section.normal h4,\n.book .book-body .page-wrapper .page-inner section.normal h5,\n.book .book-body .page-wrapper .page-inner section.normal h6 {\n    margin-top: 1em;\n    margin-bottom: 1em;\n}\n\n.title {\n  font-family: 'Lora';\n  font-size: 3em !important;\n  color: #2f65a7;\n  margin-top: 0.275em !important;\n  margin-bottom: 0.35em !important;\n}\n\n.subtitle {\n  font-family: 'Lora';\n  color: #2f65a7;\n}\n\n\n/* DROP CAPS*/\n\n\n/*p:nth-child(2):first-letter {   /* /* DROP-CAP FOR FIRST P BENEATH EACH H1 OR H2*/ /*\n  color: #2f65a7;\n  float: left;\n  font-family: 'Abril Fatface', serif;\n  font-size: 7em;\n  line-height: 65px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n  margin-bottom: 9px;\n}\n*/\n\n/* try the below with the ~ instead...or just the space?) */\n\n.section.level1 > p:first-of-type:first-letter { /*drop cap for first p beneath level 1 headers only within class .section*/\n  color: #2f65a7;\n  float: left;\n  font-family: 'Abril Fatface', serif;\n  font-size: 6em;\n  line-height: 65px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n  margin-bottom: 9px;\n}\n\n/* add drop cap to first paragraph that follows the first 2nd level header*/\n/*\n.section.level2:first-of-type > p:first-of-type:first-letter {\n  color: #2f65a7;\n  float: left;\n  font-family: 'Abril Fatface', serif;\n  font-size: 7em;\n  line-height: 65px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n  margin-bottom: 9px;\n}\n*/\n\n\n\n/* TOC */\n\n.book .book-summary {\n  background: white;\n  border-right: none;\n}\n\n.summary{\n  font-family: 'Source Sans Pro', sans-serif;\n}\n\n/* all TOC list items, basically */\n.book .book-summary ul.summary li a, .book .book-summary ul.summary li span {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  color: #00274c;\n}\n\n.summary a:hover {\n  color: #ffcb05 !important;\n}\n\n.book .book-summary ul.summary li.active>a { /*active TOC links*/\n  color: #d86018 !important;\n  border-left: solid 4px;\n  border-color: #d86018;\n  padding-left: 11px !important;\n}\n\n\nli.appendix span, li.part span { /* for TOC part names */\n  margin-top: 1em;\n  color: #000000;\n  opacity: .9 !important;\n  text-transform: uppercase;\n}\n\n.part + li[data-level=\"\"] { /* grabs first .chapter immediately after .part...but only those ch without numbers */\n text-transform: uppercase;\n}\n\n\n\nul.summary > li > a { /* The > selects all the li's which are immediately within the class summary*/\n  font-family: 'Source Sans Pro', sans-serif;\n}\n\n/* The next two rules make the horizontal line go straight across in top navbar */\n\n.summary > li:first-child {\n    height: 50px;\n    padding-top: 10px;\n    border-bottom: 1px solid rgba(0,0,0,.07);\n}\n\n.book .book-summary ul.summary li.divider {\n    height: 0px;\n}\n\n\n/* source code copy button */\n.copy {\n  width: inherit;\n  background-color: #e2e2e2 ;\n  border: none;\n  border-radius: 2px;\n  float: right;\n  font-size: 60%;\n  padding: 4px 4px 4px 4px;\n}\n\n/* Two columns */\n\n.col2 {\n  columns: 2 200px;         /* number of columns and width in pixels*/\n  -webkit-columns: 2 200px; /* chrome, safari */\n  -moz-columns: 2 200px;    /* firefox */\n}\n\n\n.side-by-side {\n  display: flex;\n}\n\n.side1 {\n  width: 40%;\n}\n\n.side2 {\n  width: 58%;\n  margin-left: 1rem;\n\n}\n\n/* -------------- div tips-------------------*/\n\ndiv.warning, div.tip, div.tryit, div.challenge, div.explore {\n  border: 4px #dfedff; /* very light blue */\n  border-style: solid;\n  padding: 1em;\n  margin: 1em 0;\n  padding-left: 100px;\n  background-size: 70px;\n  background-repeat: no-repeat;\n  background-position: 15px center;\n  min-height: 120px;\n  color: #00274c; /* blue text */\n  background-color: #bed3ec; /* light blue background */\n}\n\ndiv.warning {\n  background-image: url(\"images/warning.png\");\n  background-color: #f7f7f7; /* gray97 background */\n}\n\ndiv.tip {\n  background-image: url(\"images/tip.png\");\n  background-color: #fff7bc; /* warm yellow background */\n}\n\ndiv.tryit {\n  background-image: url(\"images/tryit.png\");\n  background-color: #edf8fb; /* light blue background */\n}\n\ndiv.challenge {\n  background-image: url(\"images/challenge.png\");\n  color: #4b0082; /* indigo text */\n  background-color: #ffe1ff; /* thistle background */\n}\n\ndiv.explore {\n  background-image: url(\"images/explore.png\");\n  background-color: #d0faee; /* green card background */\n}\n\n/* .book .book-body .page-wrapper .page-inner section.normal is needed\n   to override the styles produced by gitbook, which are ridiculously\n   overspecified. Goal of the selectors is to ensure internal \"margins\"\n   controlled only by padding of container */\n\n.book .book-body .page-wrapper .page-inner section.normal div.rstudio-tip > :first-child,\n.book .book-body .page-wrapper .page-inner section.normal div.tip > :first-child {\n  margin-top: 0;\n}\n\n.book .book-body .page-wrapper .page-inner section.normal div.rstudio-tip > :last-child,\n.book .book-body .page-wrapper .page-inner section.normal div.tip > :last-child {\n  margin-bottom: 0;\n}\n\niframe {\n   -moz-transform-origin: top left;\n   -webkit-transform-origin: top left;\n   -o-transform-origin: top left;\n   -ms-transform-origin: top left;\n   transform-origin: top left;\n}\n\n.iframe-container {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  border: #ddd 2px solid;\n  box-shadow: #888 0px 5px 8px;\n  margin-bottom: 1em;\n}\n\n.iframe-container > iframe {\n  border: none;\n}\n\nCreating Chapters in R Markdown\nEach chapter was created in R Markdown, with R code chunks, flipbooks, an learnr apps as exercises.\nNote that each chapter should start with a level 1 header, which will be the title of the chapter. Each level 1 header starts with a single hashtag, then a space, then the text of the title.\nYou can save draft chapters without necessarily publishing them to the final book. They will not be included until you list them in your _bookdown.yml file.\nAfter saving and knitting each chapter successfully, the finalized chapters can be included in the book build, and ordered, by adding them to the _bookdown.yml file, in between index.Rmd, and io98-title-holder.Rmd.\nChapter Names\nThe names of each of my chapters follow the convention, io##-Topic.Rmd. This is so that they will alphabetically follow index.Rmd and largely be in order.\nWhen a Chapter is Ready for Sharing\nAdd the new chapter to the list of chapters in order in _bookdown.yml, somewhere in between\n- index.Rmd and - io98-title_holder.Rmd\nNote that I need to have a title holder chapter as a placeholder, so that the Preface will not get a weird title from the last chapter. I am not sure why.\nIt just works.\nBuilding the Book\nRender the book with bookdown::render_book('index.html')\nPublishing the Book\nPublish the book withbookdown::publish_book(account = 'pdr_higgins')\nThen commit the changes and push to Github\nWithin a minute or three, the updated book will appear at: https://bookdown.org/pdr_higgins/rmrwr/\nLearn more\nMore details can be found at:\nhttps://bookdown.org/yihui/bookdown/rstudio-connect.html\nand at\nhttps://bookdown.org/home/about/\n\n\n\n",
    "preview": {},
    "last_modified": "2020-12-13T12:52:53-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version/",
    "title": "Setting Up a RStudio Server with the Open Source Edition",
    "description": "This is a basic setup guide for setting up a Linux-based server with RStudio Server and Shiny Server (the free versions). This was contributed by Javan Thompson, who works in IT at the University of Michigan Medical Center, and was a great help in setting this up for me. He has graciously provided a basic walkthrough for anyone else to follow.",
    "author": [
      {
        "name": "Javan Thompson",
        "url": {}
      },
      {
        "name": "Peter Higgins",
        "url": {}
      }
    ],
    "date": "2020-12-06",
    "categories": [],
    "contents": "\nGetting Started\n\n\n\nThese are general instructions on how to setup and install RStudio Server and Shiny server on a Linux machine. For the purposes of this walkthrough, we will assume that the server is running Red Hat Enterprise Linux 8 and that we have sudo rights to run all commands.\nInstall Apache\nWhile Apache is not a required component to run RStudio, I suggest using Apache (or nginx) to proxy the site so that users do not need to type or remember a port to access the webpage. Using apache also allows us to easily implement SSL/TLS. For our instance, start with:\n\nsudo yum install httpd mod_ssl \nsudo systemctl start httpd \nsudo systemctl enable httpd\n\nInstall R\nThis walkthrough will have you install R by compiling it from source. You can install R via your package manager (yum or apt). We’ve chosen to install it via source, the main reason being stability and consistency. If you install via the package manager, when a newer version of R is released, it will update your version if you update the system.\nBecause of this, I have seen instances where users would not update or patch their systems because they did not want to impact their version of R. By compiling from source, we allow users to properly keep their systems patched and updated without any worry about impacting their R version.\nAlso, researchers sometimes build code and pipelines based on a certain version of R. A sudden change to that version could cause potential issues. If these are not issues in your scenario, than you can install via the package manager if you like.\nInstall R Prerequisite Packages\nThese development packages help to ensure that R compiles with all of the capabilities R has available.\n\nsudo yum install bzip2-devel zlib-devel openssl-devel readline-devel libffi-devel libXext-devel libXt-devel xz-devel libcurl-devel libpng-devel libtiff-devel cairo-devel libjpeg-devel libicu-devel sqlite-devel libarchive-devel libXmu-devel blas-devel lapack-devel libxml2-devel\n\nCopy Script\nUsing your preferred editor, e.g. vim, nano, etc., copy the contents of the following script to the server. For the purposes of this walkthrough, I’ll call this script R-install.sh. You should also edit the prefix in the configure function line to match where you want R installed. Make sure you can actually to write to the directory you choose, or else the script will fail with permission denied errors.\n\n#!/bin/bash \n\nVERSION=4.0.3 \nmkdir /tmp/builddir \ncd /tmp/builddir \nwget https://cran.r-project.org/src/base/R-4/R-$VERSION.tar.gz \ntar xvf R-$VERSION.tar.gz \ncd R-$VERSION ./configure --prefix=/app/apps/rhel8/R/$VERSION --enable-R-shlib \nmake \nmake install \nrm -rf /tmp/builddir \n\nRun script\nFor this walkthrough, I saved the script to /opt.\nThis process should take 10-15 minutes to complete.\n\nsh /opt/R-install.sh \n\nSet R into the PATH\nAgain edit the listed path to match where R was installed.\n\ncat <<eof>>/etc/profile.d/R.sh \nexport PATH=/app/apps/rhel8/R/4.0.3/bin:\\$PATH\nEOF\n\nInstall RStudio\nRStudio provides updated links to the latest install. Go to the RStudio download page, https://rstudio.com/products/rstudio/download-server/\nand select the appropriate OS for your installation.\n\nwget https://download2.rstudio.org/server/centos8/x86_64/rstudio-server-rhel-1.3.1093-x86_64.rpm \nsudo yum install rstudio-server-rhel-1.3.1093-x86_64.rpm\n\nConfigure RStudio\nYou need to edit the configuration file /etc/rstudio/rserver.conf to include the following line.\nAs we did earlier, make sure this path is the same path where you installed R.\n\nrsession-which-r=/app/apps/rhel8/R/4.0.2/bin/R\n\nEdit Systemd Service File\nThis is a tweak to fix an issue that could cause Rstudio to not startup properly. First copy the original systemd service file.\n\nsudo cp /usr/lib/systemd/system/rstudio-server.service /etc/systemd/system/rstudio-server.service\n\nThen, using your preferred editor, add the following line after 'Type=forking'\n\nStartLimitIntervalSec=0\n\nReload the systemd daemon and start the Rstudio Service as in the code chunk below.\n\nsudo systemctl daemon-reload \nsudo systemctl start rstudio-server \nsudo systemctl enable rstudio-server\n\nConfigure RStudio Vhost\nCopy the following code to a new configuration file for apache. For RHEL8, the configuration directory is /etc/httpd/conf.d\nYou can call the file rstudio-vhost.conf.\nYou will need to change the ServerName to the name you will be using for the webhost.\nYou will need to change the information for the SSL Certificate as well.\n\n<VirtualHost _default_:80=\"\">\n  RewriteEngine On \n  RewriteCond %{HTTPS} !=on \n  RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R=301,L]\n<\/VirtualHost> \n\n<VirtuaHost *:443=\"\">\n  ServerName rstudio.example.com \n  \n  ErrorLog logs/ssl_error_log \n  # Does not work with IP v6 only IP v4\n  SetEnvIf X-Forwarded-For \"^.*\\..*\\..*\\..*\" forwarded \n  CustomLog logs/ssl_access_log combined env=!forwarded \n  CustomLog logs/ssl_access_log proxy env=forwarded \n  LogLevel warn \n  \n  ProxyPass / http://localhost:8787/\n  ProxyPassReverse / http://localhost:8787/\n  \n  SSLCertificateFile /etc/pki/tls/certs/rstudio.example.com.crt\n  SSLCertificateKeyFile /etc/pki/tls/private/rstudio.example.com.key\n<\/VirtualHost> \n\nOnce the configuration is in place, you can restart Apache.\n\nsudo systemctl restart httpd\n\nOther Considerations\n###SELinux If you are running with SELinux in enforcing mode, you will need to set an SELinux boolean for Apache.\n\nsudo setsebool -P httpd_can_network_connect 1\n\nInstall R Packages\n\nR \ninstall.packages(c('shiny','rmarkdown','devtools')) \nq()\n\nInstall RShiny\nRShiny provides updated links to the latest install. Go to the RShiny download page, https://rstudio.com/products/rstudio/download-server/\nand select the appropriate OS for your installation.\n\nwget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.15.953-x86_64.rpm \nsudo yum install --nogpgcheck shiny-server-1.5.15.953-x86_64.rpm\n\nStart and Enable the Shiny Server\n\nsudo systemctl start shiny-server \nsudo systemctl enable shiny-server \n\nConfigure RShiny Vhost\nCopy the following code to a new configuration file for apache. For RHEL8, the configuration directory is /etc/httpd/conf.d. You can call the file rshiny-vhost.conf. You will need to change the ServerName to the name you will be using for the webhost. You will need to change the information for the SSL Certificate as well.\n\n<VirtualHost _default_:80=\"\">\n  RewriteEngine On \n  RewriteCond %{HTTPS} !=on \n  RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R=301,L]\n<\/VirtualHost> \n\n<VirtualHost *:443=\"\">\n  ServerName rshiny.example.com \n  \n  ErrorLog logs/ssl_error_log \n  # Does not work with IP v6 only IP v4\n  SetEnvIf X-Forwarded-For \"^.*\\..*\\..*\\..*\" forwarded \n  CustomLog logs/ssl_access_log combined env=!forwarded \n  CustomLog logs/ssl_access_log proxy env=forwarded \n  LogLevel warn \n  \n  ProxyPass / http://localhost:3838/\n  ProxyPassReverse / http://localhost:3838/\n  \n  SSLCertificateFile /etc/pki/tls/certs/rshiny.example.com.crt\n  SSLCertificateKeyFile /etc/pki/tls/private/rshiny.example.com.key\n<\/VirtualHost> \n\nOnce the configuration is in place,\nyou can restart Apache.\n\nsudo systemctl restart httpd\n\n\n\n\n",
    "preview": "posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version/rstudio_server_open_source.png",
    "last_modified": "2020-12-06T18:59:30-05:00",
    "input_file": {},
    "preview_width": 1165,
    "preview_height": 547
  },
  {
    "path": "posts/2020-11-01-subgroup-plots/",
    "title": "Subgroup Plots for Clinical Trials",
    "description": "Sometimes editors ask for _post hoc_ analysis of subgroups in clinical trials, and will refuse the manuscript without them. How you can make these in R, in a somewhat kludgy way.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://higgi13425.github.io/medical_r/"
      }
    ],
    "date": "2020-11-01",
    "categories": [],
    "contents": "\nGetting Started with Subgroup Plots\nSubgroup plots are a bit of a fetish of medical journals, as a way to rummage through the results, hunting for possible subgroups which might receive more or less benefit than the average participant.\nThese subgroup analyses, are of course, underpowered, as you are dividing the sample size of the overall study (in which you can usually barely afford to get 80% power) into multiple (underpowered) subgroup analyses. To make matters worse, you are often (at the request of multiple reviewers and editors), analyzing 15-25 subgroups, resulting in a real problem of multiple comparisons, and occasionally yielding an outlier that looks significantly different from the overall effect, but is probably only so by chance.\nMany statisticians have weighed in on what a bad idea this practice is (examples provided here, here, and here). However, they are just so much fun to look at that journal editors, particularly in the UK and at the New England Journal of Medicine are very reluctant to give them up.\nThis has led to some spectacular statistical trolling, most famously in the ISIS study, which showed the benefits of asprin for heart attack published in the Lancet in 1988. The statisticians involved were very resistant to providing a subgroup plot. They did so only under protest, at the editors’ insistence. In fact, if you click through the link to the paper above, and scroll to page 355 (figure 5), and turn your head sideways (or rotate the pdf), you can see that the authors made their first subgroup analysis by astrological birth sign. This is level 10 statistical trolling of the editors.\nSo how to make this work for your use case?\nLet’s walk you through how I did this for a 2020 paper in Lancet Gastroenterology. Note that I have a master’s degree in statistics, not a Ph.D. My day job is in gastroenterology and IBD research. So not being someone like Richard Peto, I am not in a position to do level 10 statistical trolling. So even though I know that this is statistically a bad idea, when the editors demand a subgroup plot, I am going to help out my co-authors and produce one.\nNote: a way better version\nRandy Boyes created here (@randyboyes) https://github.com/rdboyes/Forest_plot_with_table\nLoading the Libraries\nWe are going to start with the {tidyverse} and then add in {glue} and {scales}. I added {writexl} to store a copy of the oddly-formatted data in Excel for future reference (and to show co-authors how to format it if they wanted to change any #s). The packages {grid} and {gridExtra} are to do some fancy stuff outside of the plotting rectangle.\n\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(readxl)\nlibrary(writexl)\n\nlibrary(grid)\nlibrary(gridExtra)\n\nReading in the Data\nYou can take two approaches to produce the oddly formatted data. You will need two different kinds of rows:\nThe rows that name the type of subgroup - like Age, Obesity, Diabetes, etc. - these rows will have a lot of NAs, as they are mostly for display purposes.\nThe rows that contain the subgroup names, like:\nyoung (<65 years)/old (65 years or older)\nObese/Non-obese\nDiabetic/Not diabetic).\nThese rows will contain counts, estimates, lower confidence bounds and upper confidence bounds.\n\nThe example data below are from a randomized controlled trial of 100 mg vs. 200 mg indomethacin in the prevention of post-ERCP pancreatitis.\nThe full paper, including figure 2 on page 137, which is the resulting plot (with some formatting/UK spellings added by journal staff), can be found at: https://github.com/higgi13425/subgroup_plot/blob/master/lancetgastro_2020_indomethacin.pdf\nYou can read in an example of this kind of formatted data with the code chunk below.\nNote that you have one row with the group name in the group_subgroup column (which has all NAs in the numeric columns), followed by rows with the names of each subgroup with counts, estimates (in this case, risk difference percentages), and upper and lower confidence bounds.\n\n\nindo_data <- readxl::read_excel(\"indomethacin_ride.xlsx\")\nhead(indo_data, n=12)\n\n# A tibble: 12 x 6\n   group_subgroup                 lcb risk_diff_pct   ucb number num  \n   <chr>                        <dbl>         <dbl> <dbl>  <dbl> <chr>\n 1 Age                          NA            NA    NA        NA 1    \n 2 45 or under                  -3.27          3.98 11.2     417 2    \n 3 Over 45                      -4.37          0.56  5.49    620 3    \n 4 Sex                          NA            NA    NA        NA 4    \n 5 Female                       -2.36          2.53  7.42    813 5    \n 6 Male                         -4.92          2.65 10.2     224 6    \n 7 Obese                        NA            NA    NA        NA 7    \n 8 Ob No                        -4.15          1.01  6.17    646 8    \n 9 Ob Yes                       -2.57          4.47 11.5     391 9    \n10 Sphincter of Oddi Dysfuncti… NA            NA    NA        NA 10   \n11 SOD No                       -4.1           2.28  8.66    388 11   \n12 SOD Yes                      -3.07          2.39  7.85    649 12   \n\nIf your collaborators can grok this format and produce an excel or csv in this layout, you are way ahead of the game. If not, you can manually code these into a dataframe (less fun). See the fairly icky example below. The values for counts and estimates were generated with standard {dplyr} groupby and count, with standard calculations for risk difference as a percentage and confidence bounds, with (purrr} to map over the groups. In a time crunch, I did not come up with a slick way to bind these groups vs subgroups into consecutive rows, and used the highly kludgy manual solution below.\nPretty lame, but it worked at the time.\nBut if anyone can come up with a slicker way to build the dataframe (using the example below), please let me know.\n\n\ngroup_subgroup <- c(\n  \"Age                  \", \"45 or under\", \"Over 45\", \n  \"Sex                  \", 'Female', 'Male', \n  \"Obese                \", \"Ob No\", \"Ob Yes\", \n  \"Sphincter of Oddi Dysfunction \", \"SOD No\", \"SOD Yes\", \n  \"Hx PEP                \", \"HP No\", \"HP Yes\", \n  \"Hx Pancreatitis       \", \"Hpan No\", \"Hpan Yes\", \n  \"Difficult Cannulation                \", \"DC No\", \"DC Yes\", \n  \"Precut               \", \"Pre No\", \"Pre Yes\", \n  \"Sphincterotomy               \", \"Sph No\", \"Sph Yes\", \n  \"Pancreatography              \", \"Panc No\", \"Panc Yes\",\n  \"Acinarization                \", \"Ac No\", \"Ac Yes\", \n  \"Biliary Sphincterotomy                \", \"BS No\", \"BS Yes\", \n  \"Ampullectomy                \", \"Amp No\", \"Amp Yes\", \n  \"Prophy Pancreatic Stent                \", \"PS No\", \"PS Yes\", \n  \"Ther Pancreatic Stent                \", \"PS No\", \"PS Yes\",   \"Trainee                \", \"T No\", \"T Yes\", \n  \"Double Wire                \", \"DW No\", \"DW Yes\", \n  \"Aspirin                \", \"Asa No\", \"Asa Yes\", \n  \"Site                  \", \"1\", \"2\", \"3\", \"4\",\"5\",\"6\",\n  \"Overall                \")\n\nrisk_diff_pct <- c(NA,3.98,0.56, NA,2.53,2.65, NA, 1.01, 4.47, #obese\n                   NA,2.28,2.39, \n                   NA, -0.22,16.87, NA, 1.88,3.04,  NA, 3.27, -0.21, NA, 2.49, 1.81, \n                   NA, 1.25, 3.29, NA,-4.97,3.2, NA, 0.97, 33.55,  NA, 4.48, 0.86, \n                   NA, 2.4, 0.63,   NA, 4.18, 0.83, NA, 2.0,7.65,   NA, 2.93, -2.45, \n                   NA, 2.19, 5.56, NA, 2.82, -0.95, NA, 4.69, -18.43, 0, 1.99, -10.48, -33.33,\n                   2.31)\n\nlcb <- c(NA,-3.27,-4.37, NA,-2.36, -4.92, NA, -4.15, -2.57, #obese\n         NA,-4.1,-3.07, \n         NA, -4.6,4.71, NA, -3.24,-4,  \n         NA, -1.53, -8.52, NA, -1.98, -10.06, NA, -4.13, -3.2, NA,-11.82,-1.52,\n         NA, -3.25, 11.03,  NA, -2.27, -4.4,  NA, -1.94, -14.11, \n         NA, -2.35, -4.51, NA,-2.66,-5.6,   NA, -1.49, -14.73,   \n         NA, -2.06, -16.97, NA, -1.6, -13.07, NA, -0.42, -41.15, 0, -4.03, -32.04, -86.68,\n         -1.87)\n\nucb <- c(NA, 11.2, 5.49, NA,7.42, 10.22, NA, 6.17, 11.52, #obese\n         NA,8.66,7.85, \n         NA, 4.16,29.03, NA, 7,10.09,  \n         NA, 8.07, 8.09, NA, 6.95, 13.67, NA, 6.63, 9.78, NA,18.85,7.91,\n         NA, 5.18, 56.07,  NA, 11.23, 6.12,  NA, 6.73, 15.36, \n         NA, 10.72, 6.18, NA,6.33,24.11,   NA, 7.35, 9.83,   \n         NA, 6.43, 28.08, NA, 7.26, 11.16, NA, 9.81, 4.28, 0, 8, 11.09, 20.01,\n         6.48)\n\nnumber <- c(NA,417,620, NA,813, 224, NA,646,391, #obese\n            NA,388,649, \n            NA, 860,177, NA, 625,412, \n            NA, 743,294, NA, 920, 117, NA, 561,476,  NA,158,879,\n            NA, 994,43,  NA, 445, 592,  NA, 975, 62, \n            NA, 336, 701, NA, 945,92,   NA, 885,152,  \n            NA, 1001, 36, NA, 895,142, NA, 760,48,4,179,41,5,\n            1037)\n\n\n\ndf <- tibble(group_subgroup, lcb, risk_diff_pct, ucb, number)  \ndf <- df %>%  mutate(num = as.character(1:62))\nwrite_xlsx(df, \"indomethacin_ride.xlsx\")\n\nBuilding the Plot - with Annotation by Comment\nThis is (mostly) a straightforward ggplot, with x as the risk difference percentage, and y the groups and subgroups, as indicated by the num variable (essentially the row number). (Comment #1)\nWe then add geom_point() for the point estimates, and geom_errorbarh() for the confidence bounds. (Comment #2)\nThen we add a vertical black line to indicate the line of zero effect, and a vertical red line to indicate the overall effect. (Comment #3)\nThen add labels, title, and subtitle. (Comment #4) Note that the subtitle has some hacky spacing to make this work.\nThen set theme_minimal()\nThen add geom_text for the effect estimates (will skip lines for NA) (Comment #5)\nThen set the x axis scale (Comment #6)\nFollowed by a discrete scale for the groups and subgroups on the y axis - note the aligned number of spaces on the right of the groups (Comment #7)\nThen add the directional annotations (Comment #8)\nand add the arrows below (Comment #9)\n\n\ng <- ggplot(data = df, # Comment 1\n       mapping = aes(x = risk_diff_pct, \n                     y = fct_reorder(num, desc(as.numeric(num))))) +\n  geom_point() + # Comment 2\n  geom_errorbarh(data= df, aes(x = risk_diff_pct,                   xmin = lcb, xmax = ucb, \n    y = fct_reorder(num, desc(as.numeric(num))))) +\n  geom_vline(xintercept =0, col= 'black') + # Comment 3\n  geom_vline(xintercept =2.31, col= 'red') +\n  labs(x ='Percent Risk Difference \\n(95% CI)',\n    y = \"\", subtitle = \"  N per subgroup                                                  Overall Effect\",\n    title = \"Subgroup Effects on Risk Difference\") + #Comment 4\n  theme_minimal() +\n  geom_text(data=df, size = 3, #Comment 5\n            aes(x = -90, label = number, \n    y = fct_reorder(num, desc(as.numeric(num))))) +\n  scale_x_continuous(limits = c(-90, 60),\n        breaks =c(-90,-75,-60,-45,-30,-15,0, 15, 30, 60)) +  #Comment 6\n  scale_y_discrete(breaks = 1:62, labels = c(\n    \"Age                    \", #Comment 7\n    \"45 or Under\",\n    \"Over 45\",\n    \"Sex                     \",\n    \"Female\",\n    \"Male\",\n    \"Obese                  \",\n    \"No\",\n    \"Yes\",\n    \"Sphincter of Oddi Dysfunction \",\n    \"No\",\n    \"Yes\",\n    \"History of Post-ERCP Pancreatitis  \",\n    \"No\",\n    \"Yes\",\n    \"History of Recurrent Pancreatitis       \",\n    \"No\",\n    \"Yes\",\n    \"Difficult Cannulation \",\n    \"No\",\n    \"Yes\",\n    \"Precut Sphincterotomy  \",\n    \"No\",\n    \"Yes\",\n    \"Pancreatic Sphincterotomy \",\n    \"No\",\n    \"Yes\",\n    \"Pancreatography \",\n    \"No\",\n    \"Yes\",   \n    \"Acinarization         \",\n    \"No\",\n    \"Yes\",\n    \"Biliary Sphincterotomy\",\n    \"No\",\n    \"Yes\",\n    \"Ampullectomy         \",\n    \"No\",\n    \"Yes\",\n    \"Prophylactic Pancreatic Stent placement \",\n    \"No\",\n    \"Yes\",\n    \"Therapeutic Pancreatic Stent placement \",\n    \"No\",\n    \"Yes\",\n    \"Trainee Involvement \",\n    \"No\",\n    \"Yes\",\n    \"Double Wire technique\",\n    \"No\",\n    \"Yes\",\n    \"Aspirin use          \",\n    \"No\",\n    \"Yes\",\n    \"Study Site          \",\n    \"1\",\"2\", \"3\",\"4\",\"5\",\"6\",\n    \"Overall              \"\n  )) +\n  annotate(\"text\", label = \"Favors 100 mg\", x=-45, y=59.5, col='black') + #Comment 7\n  annotate(\"text\", label = \"Favors 200 mg\", x=45, y=59.5, col='black') +\n  geom_segment(aes(x=-30, xend=-60, y = 58, yend=58),  #Comment 8\n               linejoin = \"mitre\",\n               colour = \"black\",\n               arrow= arrow(length = unit(0.1, \"cm\"),type = \"closed\")\n               ) +\n  geom_segment(aes(x=30, xend=60, y = 58, yend=58),\n               linejoin = \"mitre\",\n               colour = \"black\",\n               arrow= arrow(length = unit(0.1, \"cm\"),type = \"closed\")\n  ) \n\ng\n\n\nNow Save a Nice Version - Several Formats - Take your Pick\nDepending on what your particular journal requires. Note that you may want to tweak width and height based on your own data and the number of subgroups.\n\n\nggsave(\"subgroup_plot.jpeg\", width = 7.5, height = 9, units = \"in\", dpi = 320)\n\nggsave(\"subgroup_plot.tiff\", width = 7.5, height = 9,  units = \"in\", dpi = 320)\n\nggsave(\"subgroup_plot.pdf\", width = 7.5, height = 9,  units = \"in\", dpi = 320)\n\n\n\n",
    "preview": "posts/2020-11-01-subgroup-plots/subgroup-plots_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2020-11-01T21:17:42-05:00",
    "input_file": {},
    "preview_width": 1728,
    "preview_height": 1440
  },
  {
    "path": "posts/2020-10-20-embed-external-flipbooks/",
    "title": "How to Embed External micro-Flipbooks in Bookdown",
    "description": "After you have created micro-flipbooks in your miniflipbook project, how do you embed them in Rmarkdown and bookdown projects?",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://higgi13425.github.io/medical_r/"
      }
    ],
    "date": "2020-10-20",
    "categories": [],
    "contents": "\nHow to micro-flipbook\nLet’s assume you followed along in the micro-flipbooks blog post,\nhttps://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks/\nand you now have an RStudio project with at least one micro-flipbook, which has been pushed to Github, and is now viewable at your github.io site, much like this one:\nExample micro-flipbook\nTry it out - click on the link below, then use the left and right arrows to go forward and back in the xaringan slides.\nhttps://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1\nSo now that this is on the web as a viewable flipbook, how are you going to embed it in your Rmarkdown or bookdown project?\nSome great ideas on how to do this properly (not the slapdash [but quick] way that I do it) from the source of all flipbooks, Evangeline Reynolds, are here: https://evangelinereynolds.netlify.app/post/embedding-flipbook-mini-in-html-document/\nAlso, lots more flipbook knowledge/options here:\nhttps://evangelinereynolds.netlify.app/#posts\nFun with iframes!\nYes, in addition to stealing the brilliant idea of flipbooks from Evangeline Reynolds (@evamaerey), we are going to steal a trick or three from the iframe knowledge of Desiree DeLeon’s (@docossyle) blog post on how to use iframes to embed learnr apps.\nFor full details on how to do this properly, refer to Desiree’s blog post at:\nhttp://desiree.rbind.io/post/2020/learnr-iframes/\nDown to the details\nThis is actually not that hard.\nOnce you have working HTML at github.io with a web address, you are in business.\nJust insert some iframe code between these comment fences, as in the code chunk below. This is actually easier than inserting a learnr app - with no resizing messes.\nNote that it is essentially two html tags, one to open the iframe: <iframe> with a bunch of options/arguments,\nand then one to close the iframe: <\/iframe>\nThe style argument is basically some inline CSS styling. Note that I know almost zero CSS. You can get surprisingly far with web searches. Learn some minimal CSS here if you need to:https://www.w3schools.com/css/css_intro.asp\nNote that if you have multiple iframes in your HTML, each one needs a unique id.\nYou can set the width and height (these seemed to work for me).\nThen set the source (src) to the link to github.io, with the first xaringan slide (#1) as the starting point.\nThen usually set scrolling to “no”. Your call.\n\n<!---FLIPBOOK EX 1--> \n\n<iframe style=\"margin:0 auto; border: solid black;\" \nid=\"myIframe8\" \nwidth = \"763\" height = \"432\"\nsrc=\"https://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1\" \nscrolling=\"no\"><\/iframe> \n\n<!-------------> \n\nThen, build your website or bookdown book with this chunk in it.\nIt may be helpful to preface the first microflipbook with a bit of orientation for new users. Something like:\nSee the example flipbook below. You can click on it and move forward or backward in the slides with the left and right arrows to see what each line of code actually does.\nAnd your micro-flipbook should look something like this: Note that it will look like an empty box in the RStudio viewer, but trust: 3 steps:\nKnit the Rmd page\nBuild the website/book (Build tab)\nGit commit and push to Github\nin a minute or two, you will have a working flipbook on the web.\n\n\n\n<!————->\n\n\n\n",
    "preview": {},
    "last_modified": "2020-12-17T14:41:11-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-18-building-a-data-package/",
    "title": "Building a Data Package",
    "description": "For building a package that is largely about making datasets readily available in R.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-10-18",
    "categories": [],
    "contents": "\nGetting Started on a Data Package\nMost blog posts about building packages and arm are about bundling functions that are related into a single package.This is a common usage of packages, but at times you may want to share some common data sets with users in the form of a package. This is not as well-documented, but can be valuable.  A few examples of data packages include:\nbabynames\nfueleconomy\nnasaweather\nnycflights13\nusdanutrients  To get started, you will want to follow the guidance in the R Packages Book at: https://r-pkgs.org/whole-game.html. This will be a quick getting started guide, relative to the big book (but use it as a reference if you get stuck).\nSetup\nYou want to have a new project open in RStudio, with the project named something like {datapackage} (pick a more appropriate name for your package). You then want to load (library commands in the Console) some critical packages including {devtools}, {usethis}, and {roxygen2}.\nlibrary(devtools)\nlibrary(usethis)\nlibrary(roxygen2)\nCreating the Package\nThen use the create_package() function to create your new package {datapackage}, by running this function in the Console (pick a better name than datapackage):\ncreate_package(\"datapackage\")\nThis will set up your directories and folders in the current project to help you create a package.\nVersioning with Git and Github\nIf you have never used git before for version control, this would be a good time to install and initialize git on your computer, using the guidance in Chapter 6 of Happy Git with R, at: https://happygitwithr.com/install-git.html\nDetails on how to configure git are in chapter 7, at https://happygitwithr.com/hello-git.html\nNow make a git repository to track your versions, by running this in the Console:\nuse_git()\nGo ahead and commit files when prompted to do so.\nIf you have never used GitHub before for version control and collaboration, this would be a good time set up a Github account and add a PAT (Personal Access Token) to your computer, using the guidance in Chapter 4 of Happy Git with R, at: https://happygitwithr.com/github-acct.html\nDetails on PATs (you want one, trust me) are found in Appendix B, at: https://happygitwithr.com/github-pat.html\nEdit the Description\nLook in your Files tab, open the DESCRIPTION file, and edit:\nMake yourself the author (and add collaborators!)\nadd a title\nadd a longer Description - who is it for, why would they want this data, what is a use case?\nAdd a License\nMke your life easy, and run use_mit_license() in the Console\nAdd data\nIn the Files tab in RStudio, create a raw-data folder. Add the files that you want to turn into your accessible datasets. Now create a separate data folder.\nIn the raw-data folder, create a new R script named prep_data.R. In this file, wrangle, filter, or otherwise prepare your datasets. Let’s pretend you have a datafile that you have wrangled from Excel, and it is now a dataframe named sportsdata.\nThen save this datasets in *.rda format, as sportsdata.rda. Pick the name carefully, as you will have to live with it for a long time.\nIn this script, do this saving with with saveRDS(sportsdata, \"data-raw/sportsdata.Rdata\")\nThen use the data (put in proper format in the data folder) with the following line in your script:\nusethis::use_data(sportsdata, overwrite = TRUE)\nInstall\nDeal with Dependencies\nDo you need to use other packages to run functions (most of the time not, for a data package)?\nOn the off chance you do, you will want to run: use_package()\nAs in, if you need readr to read in some data, run in the Console:\nuse_package('readr')\nSet up for push to GitHub\nRun in the Console:\nuse_github() This will link your project to a Github repository, so that you can share your datapackage with the world.\nBasic documentation\nCreate an R script in the R/ folder, named something like datapackage.R.\nIn this file, you can add roxygen2 documentation, which looks like a long list of funny-looking comments (they start with #' rather than just a hashtag).\nTypically you include:\na short description, in a sentence or two.\nafter the @format statement, details on the format (dataframe) and the dimensions (how many rows, how many columns), and a short description of each variable, with levels or units; and the data type.\nafter the @source statement, a description of where the data came from, often including a link.\nThis looks something like:\n\n\n#' Baby names.\n#'\n#' Full baby name data provided by the SSA. This includes all names with at\n#' least 5 uses.\n#'\n#' Lifetables\n#'\n#' Cohort life tables data as provided by SSA.\n#'\n#' @format A data frame with nine variables:\n#' \\describe{\n#' \\item{\\code{x}}{age in years}\n#' \\item{\\code{qx}}{probability of death at age \\code{x}}\n#' \\item{\\code{lx}}{number of survivors, of birth cohort of 100,000, at next integral age}\n#' \\item{\\code{dx}}{number of deaths that would occur between integral ages}\n#' \\item{\\code{Lx}}{Number of person-years lived between \\code{x} and \\code{x+1}}\n#' \\item{\\code{Tx}}{Total number of person-years lived beyond age \\code{x}}\n#' \\item{\\code{ex}}{Average number of years of life remaining for members of cohort alive at age \\code{x}}\n#' \\item{\\code{sex}}{Sex}\n#' \\item{\\code{year}}{Year}\n#' }\n#'\n#' For further details, see \\url{http://www.ssa.gov/oact/NOTES/as120/LifeTables_Body.html#wp1168594}\n#'\n\"lifetables\"\n\n\n\nTo build this into a proper help file, you need to run devtools::document(). This will use roxygen2 to convert this to a *.Rd file in the man folder. This provides the “manual” for your data.\nTo build this into the package, re-build the package, with Cmd-Shift-B (Mac) or Ctrl-Shift-B (Windows). This will rebuild the package and restart R.\nNow you should be able to call from the console:\n?dataset or help(dataset)\nand see your documentation.\nThen save it and make a Git commit and push the updated package up to your Github repository.\nAdvanced documentation\nDescription Document You can write a long description of the provenance of the data, when and how it was collected, where it was published in a journal, etc. (go for it, provide all the details!) in a Rmarkdown file (named something like datapackage_desc.Rmd), then knit this to pdf. When you push your project/package to Github, your pdfs show up properly formatted. You can then take the link to the pdf and put it in your README file, so that anyone can read up on your datasets. Codebook Document You can create a nice table of each variable, a longer description, units of measurement, levels/category codes and what they mean, in a nicely formatted Rmd table. Create a Rmarkdown file (named something like datapackage_codebook.Rmd), then knit this to pdf. When you push your project/package to Github, your pdfs show up properly formatted. You can then take the link to the pdf and put it in your README file, so that anyone can know what each variable in your dataset is about.\nAdd a README\nJust run the following in the Console:\nuse_readme_rmd()\nThen open README.Rmd and edit this. This is a good place to put a description of the package, who it is intended for, and some likely use cases.\nThis is a helpful place to let users, especially new users, know how to load your package, and how to access the datasets. Show an example or two.\nIt is also a good place to add a table with the names of the datasets and links to the descriptions and codebooks.\nCheck and install\ncheck()\ninstall()\nBuild\nThe Build tab in RStudio will let you Build Package which will also restart R.\nThis will give you a clean slate and re-load (library) your datapackage.\nOnce you are happy with the datapackage, commit and push to Github. Now anyone can use you datapackage.\n\n\n\n",
    "preview": {},
    "last_modified": "2020-12-15T08:25:08-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-14-how-to-post/",
    "title": "How to Post",
    "description": "A reference for future me, on how to create posts.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-10-14",
    "categories": [],
    "contents": "\nFor the distill blog Medical R, based on the repo at https://github.com/higgi13425/medical_r\nin the R project medical_r\nand viewable on the web at https://higgi13425.github.io/medical_r/\n1. Create a new post\nrun in the Console in RStudio distill::create_post(\"title-of-post\")\nthis creates a new Rmd document for editing, inside the _posts folder, and within its own date-title specific folder inside the _posts folder. You can now edit this Rmd, including the title in the YAML header.\n2. Editing\nAll the usual Rmarkdown features, including embedding code chunks, images, videos, etc.\nhttps://rmarkdown.rstudio.com/authoring_basics.html\n3. Save and Knit\nCheck the resulting HTML in the Viewer window. Repeat steps 2 (Editing) and 3 (Knitting) until you are happy with the post.\nNote that you can keep draft = TRUE in the YAML until you are ready to share with the world\n4. Sharing\nMake sure draft= FALSE in the YAML of your post.\nThen Knit it to HTML for a final time.\nThen click on the Build Tab, and click on Build Website.\nDouble check that the HTML looks good before Commit and Push.\n5. Commit and Push\nClick on the Git tab, stage the changed files, Commit them, and Push to Github.\nWait 1-3 min, then refresh the website at Medical R https://higgi13425.github.io/medical_r/\nto see the results.\n6. A Warning Note\nBuilding the website will not re-knit posts. You have to choose to knit any post that you edit.\n\n\n",
    "preview": {},
    "last_modified": "2020-10-14T15:11:35-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-14-micro-flipbooks/",
    "title": "micro-flipbooks",
    "description": "How to make embeddable micro-flipbooks (single topic example) for embedding in bookdown HTML in e-books",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://higgi13425.github.io/medical_r/"
      }
    ],
    "date": "2020-10-14",
    "categories": [],
    "contents": "\nHow to make an embeddable micro-flipbook\nStart with picking a topic or function you want to teach.\nDraft, on paper, a rough outline of the topic and the examples you want to show, building in complexity.\nOpen the mini-flipbooks project in RStudio. You can fork this from https://github.com/higgi13425/mini_flipbooks if you would like.\nNew File\nOpen a new file - File/New/Rmarkdown/From Template/Ninja Themed Presentation\n(Note: it is often easiest to open a working example, like across_microflip_1 - this will include YAML edits, setup packages, etc., and Save As.. to the name of your new micro-flipbook)\nName it\nThen give it a name, like  function-name_microflip_#_topic.Rmd (increment # for each additional example)\nDelete Lots of Stuff\nThen delete everything from line 30 - line 576 if you are using the Ninja template.\nEdit the YAML\nUpdate\ntitle\nedit or remove subtitle\nauthor\nadd one line to nature:\nratio: 16:9\n\nEdit the Setup chunk\nEdit opts_chunk$set to include\n\n\n\nand delete options(htmltools.dir.version = FALSE)\nThen Add\nlibrary(flipbookr)\nlibrary(xaringan)\nlibrary(xaringanthemer)\nlibrary(medicaldata) or other data source\nother libraries that are needed for functions\nload any data files needed into a named dataframe, like  prostate <- medicaldata::blood_storage %>% as_tibble()\nEdit the xaringan-themer chunk\nFor a consistent style, I use:\n\n\nxaringanthemer::style_duo_accent(\n  primary_color = \"#00274C\",\n  secondary_color = \"#FFCB05\",\n  header_font_google = google_font(\"Lato\"),\n  text_font_google   = google_font(\"Manrope\"),\n  code_font_google   = google_font(\"Roboto Mono\"),\n  base_font_size = \"20px\",\n   code_font_size = \"2rem\",\n)   \n\n\n\n You can copy and paste this style, or  you can make your own version.\nStart adding headers to preparatory slide\n3 hashtags - title line on slide  4 hashtags - subhead text  Also add body text to explain what you are going to be showing.\nShow the syntax and arguments\nthen add a divider to start a new slide with 3 horizontal dashes on a single line.  This next slide will be your flipbook slide\nAdd your named chunk of R code\ngive it a name, like ttest1\nuse the option include = FALSE\nadd lots of explanatory comments\nExample:\n\n\n# start with data\nprostate %>%\n# apply t_test from infer\n# with correct arguments\n  t_test(TVol ~ AA, \n         order = c(\"0\", \"1\"))\n# Interpreting the output:\n# The t statistic is first\n# followed by degrees of freedom\n# then the p value\n# the default alternative: two.sided\n# then the confidence bounds\n# output is a tibble so that it is \n# easy to use these results\n\n\n\n Note that explanatory material is put in comments with a hashtag - can be in-between code lines, or at the end\nThen reveal your code line by line with inline r code using the chunk_reveal function:\n\nchunk_reveal(\"ttest1\", \n    break_type = \"auto\", \n    title = \"Tidy version from the {infer} package\")`\n\n Note that this references the name of the chunk above,  sets the break_type to “auto” (there are lots of other options), and  gives the microflipbook slide itself a title.\nThen (if you want more explanatory material) insert a new slide by adding 3 dashes alone on a single line\nAdd the explanatory text with Rmd formatting.\nPrettifying with CSS\nThen (if desired) add a css chunk (example below) to adjust your code font - can adjust line height or font size.\nThis css chunk does not have to be on a separate slide\n\n.remark-code{line-height: 1.5; font-size: 80%}\n\nEnding Clearly\nTo clarify that your student has reached the end of the flipbook, you can add a comment line, like ### THE END\nor even a divider line\nWith 3 dashes ---\nto create a new slide with #THE END\n\n\n\n",
    "preview": {},
    "last_modified": "2020-12-27T17:27:02-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-14-why-a-medical-r-blog/",
    "title": "Why a Medical R Blog?",
    "description": "A starting point and few Theses.",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-10-14",
    "categories": [],
    "contents": "\nFirst and foremost, because a remarkable amount of (even published) medical research is not reproducible, meaning that, given the data and code, you should be able to reproduce all the published figures and tables. \nEven better, we should have replicable research, meaning that someone else, following the same protocol, in a different setting, should be able to reproduce the results completely. This is a higher bar, and one we should strive for, but we are a long way from this. \nAs a first step toward reproducibility, we should collect data in a secure, ethical, and HIPAA-compliant way. \nWe should store data in standard (tidy) formats, and validate their quality during (not after) data entry. \nWe should have an audit trail of every change to the data, and a documented reason, date, and identity of the person making the data edit. \nWe should keep data out of spreadsheets, which do not promote reproducible data analysis, and frequently get in the way. \nWe should preserve (and comment) our data analysis in code, so that it can be re-run and reproduced in the future. \nWe should document our raw data, our code (all steps), and our computing environment, including all computer systems and software and packages used, so that others can reproduce our work. \nIdeally, we should preserve a snapshot of our computing environment, with tools like Docker and binderhub to allow easy reproduction of our data analysis even years in the future. \nIf our data, and each step in the analysis, can not be reproduced, it should not be trusted. \n\n\n",
    "preview": {},
    "last_modified": "2020-10-14T14:37:04-04:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to Medical R",
    "description": "Welcome to my blog, Medical R. I will blog on topics related to using R with medical data. I hope you enjoy reading and find this useful!",
    "author": [
      {
        "name": "Peter Higgins",
        "url": "https://higgi13425.github.io/medical_r/"
      }
    ],
    "date": "2020-10-14",
    "categories": [],
    "contents": "\nI hope to tackle topics including:\nBest Practices for Data collection and entry\nData security and PHI\nWhy to avoid using Excel\nIf you absolutely must use a spreadsheet, how to do it well.\nWhy you should invest in using REDCap\nTools to get data from REDCap to R\nExploring your data\nMaking assertions about your data\nWhat is Tidy Data & Why it is Important\nHow to make your data Tidy\nThese posts are often the first drafts for future chapters of RMRWR, Reproducible Medical Research with R, an work-in-progress e-book found at https://bookdown.org/pdr_higgins/rmrwr/\nThanks for reading!\n\n\n",
    "preview": {},
    "last_modified": "2020-10-14T14:26:25-04:00",
    "input_file": {}
  }
]
