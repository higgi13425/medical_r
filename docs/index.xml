<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Medical R</title>
    <link>https://higgi13425.github.io/medical_r/</link>
    <atom:link href="https://higgi13425.github.io/medical_r/index.xml" rel="self" type="application/rss+xml"/>
    <description>A blog about the use of R with medical data.
</description>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 26 Jun 2024 00:00:00 +0000</lastBuildDate>
    <item>
      <title>automated-redcap-pull-data</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2024-06-26-automated-redcap-pull-data</link>
      <description>


&lt;h2 id="automating-redcap-data-pulls"&gt;Automating REDCap Data Pulls&lt;/h2&gt;
&lt;p&gt;If you want to keep track of your clinical researach project in a
REDCap database, you may want to automate the process of pulling data
from REDCap to a secure server. You could use standard REDCap reports,
but it is pretty nice to be able to pull the data, write custom dat
summaries, and share these on the web with collaborators. This post will
walk you through how to set up automated data pulls and summaries from a
REDCap database to a secure firewalled server. We will assume that you
already have a working REDCap project and a secure RStudio server to
pull the data to.&lt;/p&gt;
&lt;h2 id="start-with-a-redcap-api-token"&gt;Start with A REDCap API
Token&lt;/h2&gt;
&lt;p&gt;Start by logging into your REDCap project. Go to the API section of
the project. Look for an API button in the left sidebar and click on
this. Note that if you do not see an API button, you may not have API
access - ask the person who set up the database to give you API Access.
You will need to generate a new API token. This token is like a
password, so keep it secure. You will use this token to access the data
in your project. Copy this token (a 40 character hash of capital letters
and numbers).&lt;/p&gt;
&lt;h2 id="store-the-redcap-api-token-securely"&gt;Store the REDCap API Token
Securely&lt;/h2&gt;
&lt;p&gt;Now go to your R Server, and enter the Console. Make sure you have
the &lt;code&gt;usethis&lt;/code&gt; package installed. If you do not, install it
with &lt;code&gt;install.packages("usethis")&lt;/code&gt;. Then enter the following
command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;usethis::edit_r_environ()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will open up a file named &lt;code&gt;.Renviron&lt;/code&gt; in your R
environment. Add the following line to the file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;REDCAP_PROJECTNAME_KEY = "your_api_token_GRBLE_7786GRBLE"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Save the file and restart your R session. This will store the API
token in your R environment, and you can access it with the following
command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key &amp;lt;- Sys.getenv("REDCAP_PROJECTNAME_KEY")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This stores the key securely, without putting it in your code. You do
not want to share your API key in your code. This does make it possible
to access the secret key from your code, but it is more secure than
putting the key in your code.&lt;/p&gt;
&lt;h2 id="starting-your-project"&gt;Starting Your Project&lt;/h2&gt;
&lt;p&gt;Now open up a new project on the RStudio Server, with File/New
Project. You can name the project whatever you like. I will name mine
&lt;code&gt;automated-projectname&lt;/code&gt;. This will create a new folder in
your RStudio Server. You can use the &lt;code&gt;here&lt;/code&gt; package to make
sure that you are working in the correct directory.&lt;/p&gt;
&lt;h2 id="opening-the-first-quarto-file"&gt;Opening the first Quarto
file&lt;/h2&gt;
&lt;p&gt;Within the project, select File/New File/Quarto File. This will open
up a new Quarto file. You can name this file
&lt;code&gt;automated-projectname-pull-data.qmd&lt;/code&gt;. This will be the file
that you use to pull the data from REDCap and summarize it.&lt;/p&gt;
&lt;h2 id="writing-the-quarto-file"&gt;Writing the Quarto File&lt;/h2&gt;
&lt;p&gt;Start with a setup chunk. This will load the necessary libraries
(tidyverse, REDCapTidieR, here, janitor, gt) and set up the
environment.&lt;/p&gt;
&lt;p&gt;Then you can start with the first chunk of R code. This will load the
API key from the environment. Assign the key to a variable named
&lt;code&gt;key&lt;/code&gt; with the following code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key &amp;lt;- Sys.getenv("REDCAP_PROJECTNAME_KEY")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will load the key into the variable &lt;code&gt;key&lt;/code&gt;. You can
then use this key to access the data in your REDCap project with
REDCapTidieR.&lt;/p&gt;
&lt;h2 id="pulling-data-from-redcap"&gt;Pulling Data from REDCap&lt;/h2&gt;
&lt;p&gt;In the next code chunk, you can use the &lt;code&gt;redcap_read&lt;/code&gt;
function from REDCapTidieR to pull data from your REDCap project. You
will need to know the URL of your REDCap project, the API token, and the
name of the project. You can use the following code to pull the
data:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redcap_url &amp;lt;-&lt;/code&gt;
&lt;code&gt;"https://redcapproduction.umms.med.umich.edu/api/"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data &amp;lt;- read_redcap(redcap_url, key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data %&amp;gt;%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind_tibbles()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# tibbles show up in the Environment pane&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# pick a table like demographics from the Environment pane&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;head(demographics)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will pull the data from your REDCap project and show the first
few rows of the demographics table. You can use this data to summarize
the data in the next code chunk.&lt;/p&gt;
&lt;h2 id="summarizing-the-data"&gt;Summarizing the Data&lt;/h2&gt;
&lt;p&gt;The next part is up to you. Summarize the data in any way you like.
You can use the &lt;code&gt;janitor&lt;/code&gt; package to clean up the data, the
&lt;code&gt;gt&lt;/code&gt; package to make nice tables, and the
&lt;code&gt;tidyverse&lt;/code&gt; to summarize the data.&lt;/p&gt;
&lt;p&gt;Count how many patients are in the study, compared to your enrollment
goal. Check how many forms are completed, and which have missing data.
List and count those excluded, and why. Summarize the data in any way
you like. But do not output individual or PHI data.&lt;/p&gt;
&lt;h2 id="setting-up-a-quarto-pub-account"&gt;Setting up a Quarto Pub
Account&lt;/h2&gt;
&lt;p&gt;Take a moment to set up a free account at &lt;a
href="https://quartopub.com/"
class="uri"&gt;https://quartopub.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will give you a free place to host your resulting HTML
files.&lt;/p&gt;
&lt;h2 id="rendering-the-quarto-file"&gt;Rendering the Quarto File&lt;/h2&gt;
&lt;p&gt;Just click on the Render button to get HTML output. Check the output,
and fine tune it. You may want to use #|&lt;code&gt;include:false&lt;/code&gt; in
the first line of the setup chunk to hide the code. You can also use
#|&lt;code&gt;echo:false&lt;/code&gt; at the top of the other chunks to hide the
code so that the viewer just sees the output. Add some headings and
explanatory text to make the output more readable.&lt;/p&gt;
&lt;p&gt;You can see an example here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://phiggins.quarto.pub/smart-dashboard-e99e/"&gt;Link to
HTML Dashboard&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="publishing-with-quarto-publish"&gt;Publishing with quarto
publish&lt;/h2&gt;
&lt;p&gt;You can publish this qurto file from the command line by going to
your Terminal tab in RStudio, and typing in:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;quarto publish quarto-pub your_filename.qmd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You will be asked to confirm your login, and it will publish your
HTML output to quarto-pub.&lt;/p&gt;
&lt;h2 id="automating-the-data-pull-and-the-publishing"&gt;Automating the data
pull and the publishing&lt;/h2&gt;
&lt;p&gt;Now you want this data pull and updated summary to happen
automatically, once per week, every Monday morning at 4 AM.&lt;/p&gt;
&lt;p&gt;Then you can take a look at the website every Monday morning when you
get to work and see an updated snapshot of your study. You can share the
link with collaaborators, and they can keep track of your progress.&lt;/p&gt;
&lt;p&gt;To do this, you will also need to work in the Terminal, using
&lt;code&gt;crontab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="crontab"&gt;Crontab&lt;/h2&gt;
&lt;p&gt;Crontab is an application in the Terminal that lets you schedule
scripts to run at specific, repeating times (cron). It keeps a
tabulation of all of your scheduled cron jobs to run.&lt;/p&gt;
&lt;p&gt;Go to the Terminal&lt;/p&gt;
&lt;p&gt;Enter&lt;/p&gt;
&lt;p&gt;&lt;code&gt;crontab -e&lt;/code&gt; to open crontab.&lt;/p&gt;
&lt;p&gt;It will initially be empty, but you can add and save cron jobs.&lt;/p&gt;
&lt;p&gt;The default editor is usually &lt;code&gt;vim&lt;/code&gt;, but if you prefer
&lt;code&gt;nano&lt;/code&gt;, you can change the default with
&lt;code&gt;export EDITOR=nano&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now you have an empty space to work with.&lt;/p&gt;
&lt;h2 id="a-cron-job"&gt;A cron job&lt;/h2&gt;
&lt;p&gt;A typical cron job looks something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;30 4 * * 1 /app/apps/rhel8/R/4.3.2/bin/Rscript -e "rmarkdown::render('/home/phiggins/data_space/phiggins/R/project_name/filename.qmd')" &amp;gt;&amp;gt; 'home/phiggins/data_space/phiggins/R/project_name/filename.log' 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which has 4 parts:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;30 4 * * 1&lt;/code&gt; means it should run “at 4:30 AM every
Monday”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/app/apps/rhel8/R/4.3.2/bin/&lt;/code&gt; locates the R file,
then executes an R script enclosed in quotes. This one is just
&lt;code&gt;rmarkdown::render&lt;/code&gt;, which renders the qmd document enclosed
in single quotes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The double quotes enclose a very short R script, which is just
the command to render the qmd file (which is single quoted).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; appends the output to a log file. This
file is named (with its full path) in the single quotes. The
&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; redirects any error output to the same log
file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, you can&lt;/p&gt;
&lt;p&gt;Edit your time to schedule the cron job.&lt;/p&gt;
&lt;p&gt;Check the path to your R installation, correct this if needed.&lt;/p&gt;
&lt;p&gt;Check the path to your qmd file, correct this if needed.&lt;/p&gt;
&lt;p&gt;Check the path to your log file, correct this if needed.&lt;/p&gt;
&lt;p&gt;Save this crontab in nano with Ctrl-X, Y, Enter.&lt;/p&gt;
&lt;p&gt;Now this job will run (or fail) every Monday at 4:30 AM. You probably
want to test this out first, to make sure it works. Use a time about 2
minutes ahead of the current time.&lt;/p&gt;
&lt;p&gt;Once it is working, switch it back to the desired time, like
&lt;code&gt;30 4 * * 1&lt;/code&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>9660b366fbf7c01311e0b84e7c2aaf77</distill:md5>
      <guid>https://higgi13425.github.io/medical_r/posts/2024-06-26-automated-redcap-pull-data</guid>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Sending Automated Emails with Cron Jobs</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2024-01-23-automatic-emails-with-cron-jobs-from-a-server</link>
      <description>


&lt;h2 id="getting-started-with-emails-and-blastula"&gt;Getting Started with
Emails and Blastula&lt;/h2&gt;
&lt;p&gt;There is a super-helpful YouTube video from ggnot, which goes over
how to do this with GitHub Actions.&lt;/p&gt;
&lt;p&gt;For some variety, I decided to do this with cron jobs. I have a
server that I can use to automate this.&lt;/p&gt;
&lt;p&gt;I am going to use the &lt;code&gt;blastula&lt;/code&gt; package to send emails.
It is a great package, but it needs some setup.&lt;/p&gt;
&lt;p&gt;I set up a new project on the higginslab-server.&lt;/p&gt;
&lt;p&gt;Then I created an R script named ‘auto-email with blastula.R’ and
saved it in the project folder.&lt;/p&gt;
&lt;h2 id="jumping-out-to-outlook.com"&gt;Jumping out to outlook.com&lt;/h2&gt;
&lt;p&gt;I needed an outgoing email address and credentials. I created a new
email address on outlook.com. I used the email address and password to
create a new file in the project folder called
‘outlook_server_creds’.&lt;/p&gt;
&lt;p&gt;I did this in the R script. First, I loaded {blastula} and {here}
Then I created the credentials file.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(blastula)
library(here)

# create_smtp_creds_file(file = &amp;quot;outlook_server_creds&amp;quot;,
                       # user = &amp;quot;higgins-server@outlook.com&amp;quot;,
                      # provider = &amp;quot;outlook&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prompts me to enter the password for the email address. I did
that, and it created the file in the same project folder.&lt;/p&gt;
&lt;h2 id="creating-the-email"&gt;Creating the email&lt;/h2&gt;
&lt;p&gt;Now I use an Rmarkdown file to create the email. I could also use
quarto to create the email. I am going to use the {here} package to make
sure that the email is created in the project folder.&lt;/p&gt;
&lt;p&gt;This is pretty standard R markdown.&lt;br /&gt;
The YAML header looks like this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;---
title: &amp;quot;blastula_email&amp;quot;
output: blastula::blastula_email
date: &amp;quot;2024-01-24&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error: &amp;lt;text&amp;gt;:6:0: unexpected end of input
4: date: &amp;quot;2024-01-24&amp;quot;
5: ---
  ^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I use a setup chunk and load the packages I need.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;knitr::opts_chunk$set(echo = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the rest of the email can be anything in Rmarkdown.&lt;/p&gt;
&lt;h4 id="example-email-starts-here"&gt;Example email starts here&lt;/h4&gt;
&lt;h2 id="including-code"&gt;Including Code&lt;/h2&gt;
&lt;p&gt;This is a test. I can run code&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;summary(cars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     speed           dist       
 Min.   : 4.0   Min.   :  2.00  
 1st Qu.:12.0   1st Qu.: 26.00  
 Median :15.0   Median : 36.00  
 Mean   :15.4   Mean   : 42.98  
 3rd Qu.:19.0   3rd Qu.: 56.00  
 Max.   :25.0   Max.   :120.00  &lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="including-plots"&gt;Including Plots&lt;/h2&gt;
&lt;p&gt;Or plots&lt;/p&gt;
&lt;p&gt;&lt;img src="file5adb60b0dd41_files/figure-html/pressure-1.png" width="672" /&gt;
#### Example email ends here&lt;/p&gt;
&lt;h2 id="test-email"&gt;Test Email&lt;/h2&gt;
&lt;p&gt;I am going to test the email by sending it to myself. I am going to
use the {blastula} package to do this, from the new outlook email with
credentials, to my junk yahoo email.&lt;/p&gt;
&lt;p&gt;I add the following lines to the R script, auto-email with
blastula.R&lt;/p&gt;
&lt;p&gt;First, I generate the email OBJECT using blastula render_email()&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;my_email_object &amp;lt;- render_email(&amp;quot;blastula_email.Rmd&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in abs_path(input): The file &amp;#39;blastula_email.Rmd&amp;#39; does not exist.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I send the email using the credentials file I created earlier,
with smtp_send()&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;smtp_send(my_email_object,
          from = &amp;quot;higgins-server@outlook.com&amp;quot;,
          to = &amp;quot;higgi13425@yahoo.com&amp;quot;,
          subject = &amp;quot;test email&amp;quot;,
          credentials = creds_file(&amp;quot;outlook_server_creds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in eval(expr, envir, enclos): object &amp;#39;my_email_object&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I ran the script, and I got the email in my yahoo email. It worked!
That is great for a one-time, manual email.&lt;/p&gt;
&lt;p&gt;But to repeat it, you need cron&lt;/p&gt;
&lt;h2 id="cron-jobs"&gt;Cron Jobs&lt;/h2&gt;
&lt;p&gt;This is the weird part, where everything is done in the terminal, and
is not stored in (visible) files.&lt;/p&gt;
&lt;p&gt;Load cronR in the Console.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(cronR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then build a cron job with cronR::cron_rscript() and then add it to
your cron list&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cmd &amp;lt;- cron_rscript(&amp;quot;~/data_space/phiggins/R/cronR_scripts/auto-email with blastula.R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in cron_rscript(&amp;quot;~/data_space/phiggins/R/cronR_scripts/auto-email with blastula.R&amp;quot;): file.exists(rscript) is not TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;cron_add(cmd, at = &amp;#39;9:35PM&amp;#39;, id = &amp;#39;0002&amp;#39;, description = &amp;#39;test email&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in eval(expr, envir, enclos): object &amp;#39;cmd&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can list your cron jobs with cronR::cron_ls()&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cronR::cron_ls()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And remove cron jobs with cronR::cron_rm(id = id_number)&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cronR::cron_rm(id = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in parse_crontab(user = user): No crontab available&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="as-an-automation-alternative---github-actions"&gt;As an Automation
Alternative - GitHub Actions&lt;/h2&gt;
&lt;p&gt;You can follow along with ggnot’s YouTube video, which is a great
tutorial. The link is &lt;a
href="https://www.youtube.com/watch?v=_QQGW_RUw_I"
class="uri"&gt;https://www.youtube.com/watch?v=_QQGW_RUw_I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Create a new R repository on GitHub (should be private because of
credentials file)&lt;/li&gt;
&lt;li&gt;Make sure to comment out the code that creates the credentials file.
You only need to run this once.&lt;/li&gt;
&lt;li&gt;Push the files (credentials, Rmd email document, and script) to the
repository.&lt;/li&gt;
&lt;li&gt;Create a new folder in your repository named ‘.github’, then within
that, create a new folder called ‘workflows’. Use the Add File
button/Create file to create each new folder in turn.&lt;/li&gt;
&lt;li&gt;Create the workflow file in the .github/workflows folder. I named
mine ‘schedule-email.yml’&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The contents of the file are (no surprise) a lot of YAML&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;name: &amp;#39;schedule_email&amp;#39;
on: 
  schedule:
    - cron: &amp;#39;0 9 * * *&amp;#39; # 9:00 am UTC every day
jobs:
  render:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: r-lib/actions/setup-r@v2
      with:
        r-version: &amp;#39;4.0.3&amp;#39;
    - uses: r-lib/actions/setup-pandoc@v2
    - uses: r-lib/actions/setup-tinytex@v2
    - uses: r-lib/actions/setup-r-dependencies@v2
       with:
        cache-version: 2
        extra-packages:
          any::blastula
          any::here
          any::cronR
      run: Rscript auto_email_blastula.R
      run:    
            git config --local user.name github-actions
            git config --local user.email &amp;quot;actions@github.com&amp;quot;
            git add output/*
            git commit -am &amp;quot;commit on $(date)&amp;quot;
            git push origin main 
        env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error: &amp;lt;text&amp;gt;:22:20: unexpected symbol
21:           any::cronR
22:       run: Rscript auto_email_blastula.R
                       ^&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>efe18ca752d8ebda1fbcb36f85003d15</distill:md5>
      <guid>https://higgi13425.github.io/medical_r/posts/2024-01-23-automatic-emails-with-cron-jobs-from-a-server</guid>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2024-01-23-automatic-emails-with-cron-jobs-from-a-server/automatic-emails-with-cron-jobs-from-a-server_files/figure-html5/pressure-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Functions and Functionals: TidyEval Fun</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2023-08-26-functions-and-functionals-tidyeval-fun</link>
      <description>Two approaches to use tidyeval to work in both individyal functions and with functionals like map and map2.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2023-08-26-functions-and-functionals-tidyeval-fun</guid>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2023-08-26-functions-and-functionals-tidyeval-fun/tidyeval.png" medium="image" type="image/png" width="1200" height="600"/>
    </item>
    <item>
      <title>Making a Multipanel Figure with a Single Bottom Legend</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2023-08-26-multipanel-figure-with-legend</link>
      <description>A way to create the common figure in medical journals with multiple panels and a single legend for all panels at the bottom.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2023-08-26-multipanel-figure-with-legend</guid>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2023-08-26-multipanel-figure-with-legend/multipanel_with_legend.png" medium="image" type="image/png" width="672" height="480"/>
    </item>
    <item>
      <title>Obtaining a Zenodo DOI for your R project or package</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2022-04-28-obtaining-a-zenodo-doi-for-your-r-project-or-package</link>
      <description>How to use Zenodo to obtain a Digital Object Identifier (DOI) for your R project or package in a GitHub repo.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2022-04-28-obtaining-a-zenodo-doi-for-your-r-project-or-package</guid>
      <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2022-04-28-obtaining-a-zenodo-doi-for-your-r-project-or-package/zenodo.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Creating Standard Mileposts in your Bookdown Book</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-10-20-creating-standard-mileposts-in-your-bookdown-book</link>
      <description>How to create and use recurring fun icons for mileposts within a bookdown book, as inspired by the work of Desiree De Leon.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-10-20-creating-standard-mileposts-in-your-bookdown-book</guid>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-10-20-creating-standard-mileposts-in-your-bookdown-book/milepost.png" medium="image" type="image/png" width="1284" height="502"/>
    </item>
    <item>
      <title>Using the {webexercises} package to add mini-interactive exercises to bookdown</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-07-14-using-webex-to-add-mini-interactive-exercises-to-bookdown</link>
      <description>Using the {webexercises} package by Lisa Debruine can help you add interactive exercises to your bookdown book, including True/False, multiple choice, short fill in the blank, and hide/unhide for hints or solutions. This can be very helpful for quick feedback to check understanding. Custom CSS is used for the styling and buttons, and Custom JavaScript for testing correctness and using CSS styles.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-07-14-using-webex-to-add-mini-interactive-exercises-to-bookdown</guid>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-07-14-using-webex-to-add-mini-interactive-exercises-to-bookdown/webexercises.png" medium="image" type="image/png" width="1024" height="1024"/>
    </item>
    <item>
      <title>Resources for Getting Started in R</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r</link>
      <description>An assortment of resources for learning R, for beginner to advanced users.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r</guid>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r/RYouWithMe.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Extracting Highlighting as Data from Excel Spreadsheets with {tidyxl}</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel</link>
      <description>Sometimes well-meaning people encode variables in medical data as highlighting with colors. For example, a spreadsheet where the control patients are in the green rows, and the test patients are in the red rows. This should have been encoded as a study_arm variable with values control and test. How to fix this - the {tidyxl} package can get under the hood of an excel spreadsheet and extract this information.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel</guid>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel/titanic.png" medium="image" type="image/png" width="733" height="360"/>
    </item>
    <item>
      <title>Creating Mini learnr Apps and Hosting on a Server</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server</link>
      <description>This post will explain how to create your own learnr apps and push them to an RStudio Server Open Source server.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server</guid>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Publishing a {bookdown} book on bookdown.org</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-12-publishing-a-bookdown-book-on-bookdownorg</link>
      <description>A short overview of creating a {bookdown} book and publishing on bookdown.org</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-12-publishing-a-bookdown-book-on-bookdownorg</guid>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Setting Up a RStudio Server with the Open Source Edition</title>
      <dc:creator>Javan Thompson</dc:creator>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version</link>
      <description>This is a basic setup guide for setting up a Linux-based server with RStudio Server and Shiny Server (the free versions). This was contributed by Javan Thompson, who works in IT at the University of Michigan Medical Center, and was a great help in setting this up for me. He has graciously provided a basic walkthrough for anyone else to follow.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version</guid>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version/rstudio_server_open_source.png" medium="image" type="image/png" width="1165" height="547"/>
    </item>
    <item>
      <title>Subgroup Plots for Clinical Trials</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots</link>
      <description>Sometimes editors ask for _post hoc_ analysis of subgroups in clinical trials, and will refuse the manuscript without them. How you can make these in R, in a somewhat kludgy way.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots</guid>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots/subgroup-plots_files/figure-html5/plot-1.png" medium="image" type="image/png" width="1728" height="1440"/>
    </item>
    <item>
      <title>How to Embed External micro-Flipbooks in Bookdown</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-20-embed-external-flipbooks</link>
      <description>After you have created micro-flipbooks in your miniflipbook project, how do you embed them in Rmarkdown and bookdown projects?</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-20-embed-external-flipbooks</guid>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Building a Data Package</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-18-building-a-data-package</link>
      <description>For building a package that is largely about making datasets readily available in R.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-18-building-a-data-package</guid>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>How to Post</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-how-to-post</link>
      <description>A reference for future me, on how to create posts.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-how-to-post</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>micro-flipbooks</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks</link>
      <description>How to make embeddable micro-flipbooks (single topic example) for embedding in bookdown HTML in e-books</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Why a Medical R Blog?</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-why-a-medical-r-blog</link>
      <description>A starting point and few Theses.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-why-a-medical-r-blog</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to Medical R</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/welcome</link>
      <description>Welcome to my blog, Medical R. I will blog on topics related to using R with medical data. I hope you enjoy reading and find this useful!</description>
      <guid>https://higgi13425.github.io/medical_r/posts/welcome</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
