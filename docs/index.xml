<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Medical R</title>
    <link>https://higgi13425.github.io/medical_r/</link>
    <atom:link href="https://higgi13425.github.io/medical_r/index.xml" rel="self" type="application/rss+xml"/>
    <description>A blog about the use of R with medical data.
</description>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 20 Oct 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Creating Standard Mileposts in your Bookdown Book</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-10-20-creating-standard-mileposts-in-your-bookdown-book</link>
      <description>How to create and use recurring fun icons for mileposts within a bookdown book, as inspired by the work of Desiree De Leon.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-10-20-creating-standard-mileposts-in-your-bookdown-book</guid>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Using the {webexercises} package to add mini-interactive exercises to bookdown</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-07-14-using-webex-to-add-mini-interactive-exercises-to-bookdown</link>
      <description>Using the {webexercises} package by Lisa Debruine can help you add interactive exercises to your bookdown book, including True/False, multiple choice, short fill in the blank, and hide/unhide for hints or solutions. This can be very helpful for quick feedback to check understanding. Custom CSS is used for the styling and buttons, and Custom JavaScript for testing correctness and using CSS styles.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-07-14-using-webex-to-add-mini-interactive-exercises-to-bookdown</guid>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Resources for Getting Started in R</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r</link>
      <description>An assortment of resources for learning R, for beginner to advanced users.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r</guid>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-06-13-resources-for-getting-started-in-r/RYouWithMe.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Extracting Highlighting as Data from Excel Spreadsheets with {tidyxl}</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel</link>
      <description>Sometimes well-meaning people encode variables in medical data as highlighting with colors. For example, a spreadsheet where the control patients are in the green rows, and the test patients are in the red rows. This should have been encoded as a study_arm variable with values control and test. How to fix this - the {tidyxl} package can get under the hood of an excel spreadsheet and extract this information.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel</guid>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2021-01-13-extracting-highlighting-as-data-from-excel/titanic.png" medium="image" type="image/png" width="733" height="360"/>
    </item>
    <item>
      <title>Creating Mini learnr Apps and Hosting on a Server</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server</link>
      <description>


&lt;h2 id="building-your-own-learnr-apps"&gt;Building your Own &lt;code&gt;learnr&lt;/code&gt; apps&lt;/h2&gt;
&lt;p&gt;Apps built with the {learnr} package allow students to practice coding in a controlled environment.&lt;/p&gt;
&lt;p&gt;You can add hints, solutions, and allow them to run their own code.&lt;/p&gt;
&lt;p&gt;You can (optional) assess their responses with the {gradethis} package.&lt;/p&gt;
&lt;p&gt;But how do you&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Build these?&lt;/li&gt;
&lt;li&gt;Upload and Serve them on an RStudio Server Open Source server?&lt;/li&gt;
&lt;li&gt;Incorporate them into a blog post or a bookdown book?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="building-a-learnr-app"&gt;Building a learnr app&lt;/h2&gt;
&lt;p&gt;First, plan out what you want to teach. Break it into several steps and functions. Think about exceptions you want to point out. Remember to point out and warn about common errors. Sketch out each of your examples.&lt;/p&gt;
&lt;p&gt;For each example, plan out which dataset you will use. I generally use datasets from the {medicaldata} package. You can install this package with&lt;/p&gt;
&lt;p&gt;You also need to have the {learnr} package installed from CRAN, along with its dependencies (like Shiny) with:&lt;/p&gt;
&lt;p&gt;I generally build and store learnr apps in one project, titled learnR_apps. Open this project. Check in the Files tab that you are in the root directory for this project (Home/Documents/RCode/learnR_apps for me), rather than in an app folder.&lt;/p&gt;
&lt;h3 id="leveraging-existing-apps"&gt;Leveraging existing Apps&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Create a new folder in the root directory of learnR_apps named for your new app, e.g. learn_function#&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to an existing app folder, and copy the learnr.Rmd file to your new folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to your new folder, and rename the learnr.Rmd file to your new app name (be careful to avoid typos - this should match the folder name).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the Rmd and start editing&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="starting-anew"&gt;Starting Anew&lt;/h3&gt;
&lt;p&gt;Then open a new {learnr} app by doing File/New File/Rmarkdown/From Template/Interactive Tutorial.&lt;br /&gt;
Give this a title like learn_function# (numbering if you will have more than one on that topic.)&lt;/p&gt;
&lt;p&gt;Your {learnr} file will open in the Source Pane.&lt;/p&gt;
&lt;h2 id="editing-the-yaml"&gt;Editing the YAML&lt;/h2&gt;
&lt;p&gt;Edit the title to something meaningful, like “FIltering Exercise”. The output and runtime should remain the same, and should look something like this:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;title: “Filtering Exercise”&lt;/p&gt;
&lt;p&gt;output: learnr::tutorial&lt;/p&gt;
&lt;p&gt;runtime: shiny_prerendered&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setting-up-the-setup-chunk"&gt;Setting up the Setup Chunk&lt;/h2&gt;
&lt;p&gt;Add important libraries after &lt;code&gt;library(learnr)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I often include {tidyverse}, {janitor}, and {medicaldata}. Other packages will depend on your topic.&lt;/p&gt;
&lt;p&gt;You can then load individual datasets in the setup chunk, with assignment arrows to new objects, as shown below&lt;/p&gt;
&lt;h2 id="your-first-exercise"&gt;Your First Exercise&lt;/h2&gt;
&lt;p&gt;Set up your first Exercise (Exercise 1)&lt;/p&gt;
&lt;p&gt;as an H2 heading with two ##&lt;/p&gt;
&lt;p&gt;Then add a short description of what you want the student to do:&lt;/p&gt;
&lt;p&gt;“Write the R code required to filter the prostate dataset to rows with a prostate volume (p_vol) greater than or equal to 90:”&lt;/p&gt;
&lt;p&gt;Then add your first R code chunk. Give it a name, like &lt;code&gt;function1&lt;/code&gt;, and set options to &lt;br&gt; &lt;strong&gt;“exercise=TRUE, error=TRUE, lines = 5”&lt;/strong&gt;. &lt;br&gt; Make sure to include error=TRUE if you have blanks in the code.&lt;/p&gt;
&lt;p&gt;The top line of your code chunk should read&lt;br&gt; &lt;strong&gt;{r function1, exercise=TRUE, error=TRUE, lines=5}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then add to the code block your solution code. Run it to make sure everything works. For this example, we will use:&lt;br&gt; prostate %&amp;gt;% &lt;br&gt; filter(age &amp;gt;= 90)&lt;/p&gt;
&lt;p&gt;Then copy the entire code chunk, including options, and paste it a few lines below. Edit the name of this new code chunk to be function1-solution, as below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;{r function1-solution, eval=FALSE, lines = 5}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now copy the code in the solution chunk to the exercise chunk.&lt;/p&gt;
&lt;p&gt;Replace a few key items (arguments, function names) in the exercise code chunk with a blank — (three dashes). This will produce an error, but this is OK, as you set error = TRUE in the exercise chunk options. This will require the students to fill in in the blank. Something like:&lt;br&gt; prostate %&amp;gt;% filter(— &amp;gt;= —)&lt;/p&gt;
&lt;p&gt;Start with only a few blanks at first, and increase the amount of typing that students have to do with each exercise chunk, until they can write a whole code pipeline on their own.&lt;/p&gt;
&lt;h3 id="adding-a-hint"&gt;Adding a hint&lt;/h3&gt;
&lt;p&gt;Copy the solution code chunk, and paste the chunk &lt;em&gt;in between&lt;/em&gt; the exercise and the solution. Rename this code chunk as &lt;strong&gt;function1-hint.&lt;/strong&gt; Make sure to include error=TRUE if you have blanks in the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;{r function1-hint, error=TRUE, lines = 5}&lt;/strong&gt; &lt;br&gt; prostate %&amp;gt;% &lt;br&gt; filter(age &amp;gt;= —)&lt;/p&gt;
&lt;p&gt;Edit the code in this chunk to provide an intermediate hint between the &lt;em&gt;exercise&lt;/em&gt; and the &lt;em&gt;solution&lt;/em&gt;. Sometimes it is better to make the solution the only hint in simple exercises.&lt;/p&gt;
&lt;h3 id="run-your-learnr-app-to-test-it"&gt;Run your learnr app to test it&lt;/h3&gt;
&lt;p&gt;Click on the &lt;strong&gt;Run document&lt;/strong&gt; button in the top center of the Source pane. This should generate a working learnr app. Test it with working and with non-working code. Test that the hints work, and that these can be copied to the exercise pane, and the code run successfully with the &lt;strong&gt;Run code&lt;/strong&gt; button.&lt;/p&gt;
&lt;h2 id="more-exercises"&gt;More Exercises&lt;/h2&gt;
&lt;p&gt;Add a new level 2 ## header for Exercise 2 after the completion of exercise 1. Copy your exercise, hint, and solution chunks as one blob, and paste these below. Change the chunk names to function-2, and add appropriate captions, like “Exercise 2: Filtering on Strings”&lt;/p&gt;
&lt;p&gt;After each exercise, test it with &lt;strong&gt;Run Document&lt;/strong&gt;. When done, save your {learnr} app, commit to git, and push to GitHub.&lt;/p&gt;
&lt;h2 id="putting-apps-on-the-shiny-server"&gt;Putting Apps on the Shiny Server&lt;/h2&gt;
&lt;p&gt;For this example, I will refer to an RStudio Server Open Source with Shiny Server Open Source installed.&lt;/p&gt;
&lt;p&gt;To access this, I need to be on campus, or connect via VPN.&lt;/p&gt;
&lt;p&gt;Once the VPN is established, I can log into the server at &lt;a href="https://higginslab-rstudio.med.umich.edu/" class="uri"&gt;https://higginslab-rstudio.med.umich.edu/&lt;/a&gt; with my level 2 password.&lt;/p&gt;
&lt;p&gt;I can then go to the Files tab in RStudio, and click on the &lt;em&gt;ellipses&lt;/em&gt; button in the upper right corner - on the same level as the path. This will allow me to enter a new path. In my case, I enter:&lt;/p&gt;
&lt;p&gt;/srv/shiny-server/shiny-apps/&lt;/p&gt;
&lt;p&gt;When I am in the correct folder, I create a new folder for the new app - named something like “learn_filter2”.&lt;/p&gt;
&lt;p&gt;Then click on this folder to open it.&lt;/p&gt;
&lt;p&gt;Then click on the &lt;strong&gt;Upload&lt;/strong&gt; button to upload the &lt;strong&gt;.Rmd&lt;/strong&gt; file of the new learnr app. Use the &lt;strong&gt;Choose File&lt;/strong&gt; button, browse to my local computer, through Rcode/learnR_apps, and find the local version of the app in the learnR_apps project. Open the folder for the local app, choose the &lt;strong&gt;.Rmd&lt;/strong&gt; file, and click OK to upload.&lt;/p&gt;
&lt;p&gt;Now that the file is on the server, it will generate the appropriate HTML file.&lt;/p&gt;
&lt;p&gt;Return to the home directory in RStudio Server by clicking on the &lt;em&gt;ellipses&lt;/em&gt; button in the Files tab, and enter “~” (tilde) to return to the home directory.&lt;/p&gt;
&lt;h2 id="testing-the-new-app"&gt;Testing the New App&lt;/h2&gt;
&lt;p&gt;You should now be able to go to&lt;/p&gt;
&lt;p&gt;&lt;a href="https://higginslab-rshiny.med.umich.edu/shiny-apps/name_of_new_learnr_app"&gt;https://higginslab-rshiny.med.umich.edu/shiny-apps&lt;/a&gt;/&lt;/p&gt;
&lt;p&gt;and find the new app, and test it.&lt;/p&gt;
&lt;p&gt;You can link to this app with the link &lt;a href="https://higginslab-rshiny.med.umich.edu/shiny-apps/name_of_new_learnr_app" class="uri"&gt;https://higginslab-rshiny.med.umich.edu/shiny-apps/name_of_new_learnr_app&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="inserting-the-new-app-into-a-bookdown-book"&gt;Inserting the New App into a Bookdown book&lt;/h2&gt;
&lt;p&gt;You can insert learnr apps with &lt;em&gt;iframes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It should look like this:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;### Your Turn - learnr exercises&lt;/p&gt;
&lt;!---LEARNR TUTORIAL EX 1--&gt;
&lt;p&gt;&amp;lt;iframe style=“margin:0 auto; border: solid black;” id=“myIframe9” width=“763” height=“423” src=“&lt;a href="https://higginslab-rshiny.med.umich.edu/shiny-apps/learn_filter1/%22"&gt;https://higginslab-rshiny.med.umich.edu/shiny-apps/learn_filter1/”&lt;/a&gt; data-external=”1” allowfullscreen loading= “lazy” scrolling=“yes”&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;!---LEARNR TUTORIAL EX 1--&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; Leave scrolling = “yes” if you have multiple exercises.&lt;/p&gt;
&lt;p&gt;Each iframe should have a unique id.&lt;/p&gt;
&lt;p&gt;The source (src) should be equal to the link to the new app.&lt;/p&gt;
&lt;p&gt;You should have spaces between options, but no return characters in the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag. Return characters will cause your iframe to silently fail.&lt;/p&gt;
&lt;p&gt;Set data-external=“1” - so that Pandoc will not fail to render this external app.&lt;/p&gt;
&lt;p&gt;set loading = “lazy” so that it will not load until the user scrolls to the learnr app. Note that Shiny (including learnr) apps will time out if not used within a minute or two after loading.&lt;/p&gt;
&lt;p&gt;The same &lt;em&gt;iframe&lt;/em&gt; approach works for blog posts.&lt;/p&gt;
&lt;h2 id="making-this-app-live-in-a-bookdown-book"&gt;Making this App Live in a Bookdown book&lt;/h2&gt;
&lt;p&gt;After inserting the learnr app, add an appropriate header text introduction above.&lt;/p&gt;
&lt;p&gt;Then save the Rmd for this chapter.&lt;/p&gt;
&lt;p&gt;Then render the book with &lt;code&gt;bookdown::render_book('index.html')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will take a couple of minutes.&lt;/p&gt;
&lt;p&gt;Then publish the book to your bookdown.org account. In my case, this is&lt;br /&gt;
&lt;code&gt;bookdown::publish_book(account = 'pdr_higgins')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to agree to update the book.&lt;/p&gt;
&lt;p&gt;Within a minute, the book will be updated online.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>0a6c6d3b20c7a9fdb37d76f093783a8a</distill:md5>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server</guid>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Publishing a {bookdown} book on bookdown.org</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-12-publishing-a-bookdown-book-on-bookdownorg</link>
      <description>A short overview of creating a {bookdown} book and publishing on bookdown.org</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-12-publishing-a-bookdown-book-on-bookdownorg</guid>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Setting Up a RStudio Server with the Open Source Edition</title>
      <dc:creator>Javan Thompson</dc:creator>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version</link>
      <description>This is a basic setup guide for setting up a Linux-based server with RStudio Server and Shiny Server (the free versions). This was contributed by Javan Thompson, who works in IT at the University of Michigan Medical Center, and was a great help in setting this up for me. He has graciously provided a basic walkthrough for anyone else to follow.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version</guid>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2020-12-06-setting-up-a-rstudio-server-with-free-software-version/rstudio_server_open_source.png" medium="image" type="image/png" width="1165" height="547"/>
    </item>
    <item>
      <title>Subgroup Plots for Clinical Trials</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots</link>
      <description>Sometimes editors ask for _post hoc_ analysis of subgroups in clinical trials, and will refuse the manuscript without them. How you can make these in R, in a somewhat kludgy way.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots</guid>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://higgi13425.github.io/medical_r/posts/2020-11-01-subgroup-plots/subgroup-plots_files/figure-html5/plot-1.png" medium="image" type="image/png" width="1728" height="1440"/>
    </item>
    <item>
      <title>How to Embed External micro-Flipbooks in Bookdown</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-20-embed-external-flipbooks</link>
      <description>


&lt;h2 id="how-to-micro-flipbook"&gt;How to micro-flipbook&lt;/h2&gt;
&lt;p&gt;Let’s assume you followed along in the micro-flipbooks blog post,&lt;/p&gt;
&lt;p&gt;&lt;a href="https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks/" class="uri"&gt;https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and you now have an RStudio project with at least one micro-flipbook, which has been pushed to Github, and is now viewable at your github.io site, much like the one found at the link below.&lt;/p&gt;
&lt;h2 id="example-micro-flipbook"&gt;Example micro-flipbook&lt;/h2&gt;
&lt;p&gt;Try it out - click on the link below, then use the left and right arrows to go forward and back in the xaringan slides. You can also make it full screen (see bottom bar icons, Esc to return), use Home/End to go to 1st/last slide, or share on social media.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1" class="uri"&gt;https://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now that this is on the web as a viewable flipbook, how are you going to embed it in your Rmarkdown or bookdown project?&lt;/p&gt;
&lt;p&gt;Some great ideas on how to do this properly (not the slapdash [but quick] way that I do it) from the source of all flipbooks, Evangeline Reynolds, are here: &lt;a href="https://evangelinereynolds.netlify.app/post/embedding-flipbook-mini-in-html-document/" class="uri"&gt;https://evangelinereynolds.netlify.app/post/embedding-flipbook-mini-in-html-document/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, there is lots more flipbook knowledge/options here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://evangelinereynolds.netlify.app/#posts" class="uri"&gt;https://evangelinereynolds.netlify.app/#posts&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="fun-with-iframes"&gt;Fun with iframes!&lt;/h2&gt;
&lt;p&gt;Yes, in addition to stealing the brilliant idea of flipbooks from Evangeline Reynolds (&lt;span class="citation"&gt;@evamaerey&lt;/span&gt;), we are going to steal a trick or three from the &lt;em&gt;iframe&lt;/em&gt; knowledge of Desiree DeLeon’s (&lt;span class="citation"&gt;@docossyle&lt;/span&gt;) blog post on how to use iframes to embed &lt;em&gt;learnr&lt;/em&gt; apps.&lt;/p&gt;
&lt;p&gt;For full details on how to do this properly, refer to Desiree’s blog post at:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://desiree.rbind.io/post/2020/learnr-iframes/" class="uri"&gt;http://desiree.rbind.io/post/2020/learnr-iframes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="down-to-the-details"&gt;Down to the details&lt;/h2&gt;
&lt;p&gt;This is actually not that hard.&lt;/p&gt;
&lt;p&gt;Once you have working HTML at github.io with a web address, you are in business.&lt;/p&gt;
&lt;p&gt;Just insert some &lt;em&gt;iframe&lt;/em&gt; code between two comment fences, as in the code chunk below. This is actually &lt;em&gt;easier&lt;/em&gt; than inserting a &lt;em&gt;learnr&lt;/em&gt; app - with no resizing issues.&lt;/p&gt;
&lt;p&gt;Note that it is essentially two html tags, one to open the iframe: &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; with a &lt;strong&gt;bunch&lt;/strong&gt; of options/arguments,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;style = ““margin:0 auto; border: solid black;”&lt;/li&gt;
&lt;li&gt;id = “myIframeNN-unique name/number here”&lt;/li&gt;
&lt;li&gt;width = “763”&lt;/li&gt;
&lt;li&gt;height = “432”&lt;/li&gt;
&lt;li&gt;src =“&lt;a href="https://actual.link.here" class="uri"&gt;https://actual.link.here&lt;/a&gt;”&lt;/li&gt;
&lt;li&gt;scrolling = “no”&lt;/li&gt;
&lt;li&gt;data-external=“1”&lt;/li&gt;
&lt;li&gt;allowfullscreen&lt;/li&gt;
&lt;li&gt;loading = “lazy”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and then one to close the iframe: &lt;code&gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The style argument is basically some inline CSS styling. Note that I know almost zero CSS. You can get surprisingly far with web searches. You can learn some minimal CSS here if you need to:&lt;br /&gt;
&lt;a href="https://www.w3schools.com/css/css_intro.asp" class="uri"&gt;https://www.w3schools.com/css/css_intro.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that if you have multiple iframes in your HTML document/chapter, each one &lt;strong&gt;must have&lt;/strong&gt; a unique id.&lt;/p&gt;
&lt;p&gt;You can set the width and height (these (763 x 432) seemed to work for me).&lt;/p&gt;
&lt;p&gt;Then set the source (src) to the link to github.io, with the first xaringan slide (#1) as the starting point.&lt;/p&gt;
&lt;p&gt;Then usually set scrolling to “no”. Your call.&lt;/p&gt;
&lt;p&gt;NOTE: as of fall 2021, a change in Pandoc means that you must add &lt;code&gt;data-external="1"&lt;/code&gt; for any externally sourced files (like a flipbook from github, or a learnr app) so that Pandoc won’t get grumpy and refuse to render the flipbook.&lt;/p&gt;
&lt;p&gt;I like to allowfullscreen, especially if there is a lot of code.&lt;/p&gt;
&lt;p&gt;I like to set loading = “lazy”, so that this will not load until the reader scrolls to it. This makes it less likely that the flipbook will time out due to inactivity if you have a long chapter.&lt;/p&gt;
&lt;p&gt;NOTE: if the flipbook does time out, it will turn gray and not function (no advancing with arrow keys). This can be easily fixed by reloading the webpage in the browser, but it is worth letting learners know about this possibility and the solution.&lt;/p&gt;
&lt;p&gt;NOTE: Your &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag, with many options, should only have spaces between options, with &lt;strong&gt;no&lt;/strong&gt; return characters. A return character will make your iframe silently fail.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;&amp;lt;!---FLIPBOOK EX 1--&amp;gt; 

&amp;lt;iframe style=&amp;quot;margin:0 auto; border: solid black;&amp;quot; 
id=&amp;quot;myIframe11&amp;quot; width=&amp;quot;763&amp;quot; height=&amp;quot;432&amp;quot;
src=&amp;quot;https://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1&amp;quot; 
scrolling=&amp;quot;no&amp;quot; data-external=&amp;quot;1&amp;quot; 
allowfullscreen
loading=&amp;quot;lazy&amp;quot;&amp;gt;
&amp;lt;/iframe&amp;gt;

&amp;lt;!-------------&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, build your website or bookdown book with this chunk in it.&lt;/p&gt;
&lt;p&gt;It may be helpful to preface the first microflipbook with a bit of orientation for new users. Something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See the example flipbook below. You can click on it and move forward or backward in the slides with the left and right arrows to see what each line of code actually does.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And your micro-flipbook will look something like the flipbook below when up on the web: * Note that in the RStudio viewer at this point it will look like an empty white box, but hang in there (and trust):*&lt;/p&gt;
&lt;p&gt;To get this up on the web and working, will require several steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knit the Rmd page&lt;/li&gt;
&lt;li&gt;Build the website/book (Build tab)&lt;/li&gt;
&lt;li&gt;Git commit and push to Github&lt;/li&gt;
&lt;li&gt;Render the book (&lt;em&gt;bookdown::render_book()&lt;/em&gt;) - for some reason this may open a web page in your browser that does not connect. Just close it.&lt;/li&gt;
&lt;li&gt;publish the book to bookdown.org (&lt;em&gt;bookdown::publish_book(account = “your account name here”)&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in a minute or two, you will have a working flipbook in your bookdown book on the web at bookdown.org that looks something like the below example.&lt;/p&gt;
&lt;!---FLIPBOOK EX 1--&gt;
&lt;iframe style="margin:0 auto; border: solid black;" id="myIframe11" width="763" height="432" src="https://higgi13425.github.io/mini_flipbooks/ttest_flipbook.html#1" scrolling="no" data-external="1" allowfullscreen loading="lazy"&gt;
&lt;/iframe&gt;
&lt;!-------------&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>89eec1f643c8da34f4aab61e2a85a16b</distill:md5>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-20-embed-external-flipbooks</guid>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Building a Data Package</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-18-building-a-data-package</link>
      <description>For building a package that is largely about making datasets readily available in R.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-18-building-a-data-package</guid>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>How to Post</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-how-to-post</link>
      <description>A reference for future me, on how to create posts.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-how-to-post</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>micro-flipbooks</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks</link>
      <description>How to make embeddable micro-flipbooks (single topic example) for embedding in bookdown HTML in e-books</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-micro-flipbooks</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Why a Medical R Blog?</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/2020-10-14-why-a-medical-r-blog</link>
      <description>A starting point and few Theses.</description>
      <guid>https://higgi13425.github.io/medical_r/posts/2020-10-14-why-a-medical-r-blog</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to Medical R</title>
      <dc:creator>Peter Higgins</dc:creator>
      <link>https://higgi13425.github.io/medical_r/posts/welcome</link>
      <description>Welcome to my blog, Medical R. I will blog on topics related to using R with medical data. I hope you enjoy reading and find this useful!</description>
      <guid>https://higgi13425.github.io/medical_r/posts/welcome</guid>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
